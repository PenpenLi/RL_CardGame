// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDESectionData : IGDEData
    {
        static string isLockedKey = "isLocked";
		bool _isLocked;
        public bool isLocked
        {
            get { return _isLocked; }
            set {
                if (_isLocked != value)
                {
                    _isLocked = value;
					GDEDataManager.SetBool(_key, isLockedKey, _isLocked);
                }
            }
        }

        static string receiveRewardKey = "receiveReward";
		bool _receiveReward;
        public bool receiveReward
        {
            get { return _receiveReward; }
            set {
                if (_receiveReward != value)
                {
                    _receiveReward = value;
					GDEDataManager.SetBool(_key, receiveRewardKey, _receiveReward);
                }
            }
        }

        static string remarkKey = "remark";
		int _remark;
        public int remark
        {
            get { return _remark; }
            set {
                if (_remark != value)
                {
                    _remark = value;
					GDEDataManager.SetInt(_key, remarkKey, _remark);
                }
            }
        }

        static string finishCountKey = "finishCount";
		int _finishCount;
        public int finishCount
        {
            get { return _finishCount; }
            set {
                if (_finishCount != value)
                {
                    _finishCount = value;
					GDEDataManager.SetInt(_key, finishCountKey, _finishCount);
                }
            }
        }

        static string IndexKey = "Index";
		int _Index;
        public int Index
        {
            get { return _Index; }
            set {
                if (_Index != value)
                {
                    _Index = value;
					GDEDataManager.SetInt(_key, IndexKey, _Index);
                }
            }
        }

        public GDESectionData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Section");
			
            dict.Merge(true, isLocked.ToGDEDict(isLockedKey));
            dict.Merge(true, receiveReward.ToGDEDict(receiveRewardKey));
            dict.Merge(true, remark.ToGDEDict(remarkKey));
            dict.Merge(true, finishCount.ToGDEDict(finishCountKey));
            dict.Merge(true, Index.ToGDEDict(IndexKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isLockedKey, out _isLocked);
                dict.TryGetBool(receiveRewardKey, out _receiveReward);
                dict.TryGetInt(remarkKey, out _remark);
                dict.TryGetInt(finishCountKey, out _finishCount);
                dict.TryGetInt(IndexKey, out _Index);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isLocked = GDEDataManager.GetBool(_key, isLockedKey, _isLocked);
            _receiveReward = GDEDataManager.GetBool(_key, receiveRewardKey, _receiveReward);
            _remark = GDEDataManager.GetInt(_key, remarkKey, _remark);
            _finishCount = GDEDataManager.GetInt(_key, finishCountKey, _finishCount);
            _Index = GDEDataManager.GetInt(_key, IndexKey, _Index);
        }

        public GDESectionData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDESectionData newClone = new GDESectionData(newKey);

            newClone.isLocked = isLocked;
            newClone.receiveReward = receiveReward;
            newClone.remark = remark;
            newClone.finishCount = finishCount;
            newClone.Index = Index;

            return newClone;
		}

        public GDESectionData DeepClone()
		{
			GDESectionData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_isLocked()
        {
            GDEDataManager.ResetToDefault(_key, isLockedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isLockedKey, out _isLocked);
        }

        public void Reset_receiveReward()
        {
            GDEDataManager.ResetToDefault(_key, receiveRewardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(receiveRewardKey, out _receiveReward);
        }

        public void Reset_remark()
        {
            GDEDataManager.ResetToDefault(_key, remarkKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(remarkKey, out _remark);
        }

        public void Reset_finishCount()
        {
            GDEDataManager.ResetToDefault(_key, finishCountKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(finishCountKey, out _finishCount);
        }

        public void Reset_Index()
        {
            GDEDataManager.ResetToDefault(_key, IndexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(IndexKey, out _Index);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, isLockedKey);
            GDEDataManager.ResetToDefault(_key, remarkKey);
            GDEDataManager.ResetToDefault(_key, finishCountKey);
            GDEDataManager.ResetToDefault(_key, IndexKey);
            GDEDataManager.ResetToDefault(_key, receiveRewardKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
