// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEunitTeamData : IGDEData
    {
        static string badgeKey = "badge";
		int _badge;
        public int badge
        {
            get { return _badge; }
            set {
                if (_badge != value)
                {
                    _badge = value;
					GDEDataManager.SetInt(_key, badgeKey, _badge);
                }
            }
        }

        static string goddessKey = "goddess";
		string _goddess;
        public string goddess
        {
            get { return _goddess; }
            set {
                if (_goddess != value)
                {
                    _goddess = value;
					GDEDataManager.SetString(_key, goddessKey, _goddess);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        static string teamNameKey = "teamName";
		string _teamName;
        public string teamName
        {
            get { return _teamName; }
            set {
                if (_teamName != value)
                {
                    _teamName = value;
					GDEDataManager.SetString(_key, teamNameKey, _teamName);
                }
            }
        }

        public GDEunitTeamData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "unitTeam");
			
            dict.Merge(true, badge.ToGDEDict(badgeKey));
            dict.Merge(true, goddess.ToGDEDict(goddessKey));
            dict.Merge(true, id.ToGDEDict(idKey));
            dict.Merge(true, teamName.ToGDEDict(teamNameKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(badgeKey, out _badge);
                dict.TryGetString(goddessKey, out _goddess);
                dict.TryGetString(idKey, out _id);
                dict.TryGetString(teamNameKey, out _teamName);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _badge = GDEDataManager.GetInt(_key, badgeKey, _badge);
            _goddess = GDEDataManager.GetString(_key, goddessKey, _goddess);
            _id = GDEDataManager.GetString(_key, idKey, _id);
            _teamName = GDEDataManager.GetString(_key, teamNameKey, _teamName);
        }

        public GDEunitTeamData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEunitTeamData newClone = new GDEunitTeamData(newKey);

            newClone.badge = badge;
            newClone.goddess = goddess;
            newClone.id = id;
            newClone.teamName = teamName;

            return newClone;
		}

        public GDEunitTeamData DeepClone()
		{
			GDEunitTeamData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_badge()
        {
            GDEDataManager.ResetToDefault(_key, badgeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(badgeKey, out _badge);
        }

        public void Reset_goddess()
        {
            GDEDataManager.ResetToDefault(_key, goddessKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(goddessKey, out _goddess);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void Reset_teamName()
        {
            GDEDataManager.ResetToDefault(_key, teamNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(teamNameKey, out _teamName);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, goddessKey);
            GDEDataManager.ResetToDefault(_key, badgeKey);
            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, teamNameKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
