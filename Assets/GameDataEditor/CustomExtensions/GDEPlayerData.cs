// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEPlayerData : IGDEData
    {
        static string maxPassSectionKey = "maxPassSection";
		int _maxPassSection;
        public int maxPassSection
        {
            get { return _maxPassSection; }
            set {
                if (_maxPassSection != value)
                {
                    _maxPassSection = value;
					GDEDataManager.SetInt(_key, maxPassSectionKey, _maxPassSection);
                }
            }
        }

        static string lastPassSectionKey = "lastPassSection";
		int _lastPassSection;
        public int lastPassSection
        {
            get { return _lastPassSection; }
            set {
                if (_lastPassSection != value)
                {
                    _lastPassSection = value;
					GDEDataManager.SetInt(_key, lastPassSectionKey, _lastPassSection);
                }
            }
        }

        static string maxDurgeonPassLevelKey = "maxDurgeonPassLevel";
		int _maxDurgeonPassLevel;
        public int maxDurgeonPassLevel
        {
            get { return _maxDurgeonPassLevel; }
            set {
                if (_maxDurgeonPassLevel != value)
                {
                    _maxDurgeonPassLevel = value;
					GDEDataManager.SetInt(_key, maxDurgeonPassLevelKey, _maxDurgeonPassLevel);
                }
            }
        }

        static string coinKey = "coin";
		int _coin;
        public int coin
        {
            get { return _coin; }
            set {
                if (_coin != value)
                {
                    _coin = value;
					GDEDataManager.SetInt(_key, coinKey, _coin);
                }
            }
        }

        static string addGoldPercKey = "addGoldPerc";
		int _addGoldPerc;
        public int addGoldPerc
        {
            get { return _addGoldPerc; }
            set {
                if (_addGoldPerc != value)
                {
                    _addGoldPerc = value;
					GDEDataManager.SetInt(_key, addGoldPercKey, _addGoldPerc);
                }
            }
        }

        static string allBufPercKey = "allBufPerc";
		int _allBufPerc;
        public int allBufPerc
        {
            get { return _allBufPerc; }
            set {
                if (_allBufPerc != value)
                {
                    _allBufPerc = value;
					GDEDataManager.SetInt(_key, allBufPercKey, _allBufPerc);
                }
            }
        }

        static string newBestLevelKey = "newBestLevel";
		int _newBestLevel;
        public int newBestLevel
        {
            get { return _newBestLevel; }
            set {
                if (_newBestLevel != value)
                {
                    _newBestLevel = value;
					GDEDataManager.SetInt(_key, newBestLevelKey, _newBestLevel);
                }
            }
        }

        static string dimensionKey = "dimension";
		int _dimension;
        public int dimension
        {
            get { return _dimension; }
            set {
                if (_dimension != value)
                {
                    _dimension = value;
					GDEDataManager.SetInt(_key, dimensionKey, _dimension);
                }
            }
        }

        static string damondKey = "damond";
		int _damond;
        public int damond
        {
            get { return _damond; }
            set {
                if (_damond != value)
                {
                    _damond = value;
					GDEDataManager.SetInt(_key, damondKey, _damond);
                }
            }
        }

        static string sickBedNumKey = "sickBedNum";
		int _sickBedNum;
        public int sickBedNum
        {
            get { return _sickBedNum; }
            set {
                if (_sickBedNum != value)
                {
                    _sickBedNum = value;
					GDEDataManager.SetInt(_key, sickBedNumKey, _sickBedNum);
                }
            }
        }

        static string honorPointKey = "honorPoint";
		int _honorPoint;
        public int honorPoint
        {
            get { return _honorPoint; }
            set {
                if (_honorPoint != value)
                {
                    _honorPoint = value;
					GDEDataManager.SetInt(_key, honorPointKey, _honorPoint);
                }
            }
        }

        static string JianCaiKey = "JianCai";
		int _JianCai;
        public int JianCai
        {
            get { return _JianCai; }
            set {
                if (_JianCai != value)
                {
                    _JianCai = value;
					GDEDataManager.SetInt(_key, JianCaiKey, _JianCai);
                }
            }
        }

        static string achievementDataKey = "achievementData";
		GDEAchievementData _achievementData;
        public GDEAchievementData achievementData
        {
            get { return _achievementData; }
            set {
                if (_achievementData != value)
                {
                    _achievementData = value;
					GDEDataManager.SetCustom(_key, achievementDataKey, _achievementData);
                }
            }
        }

        static string temple_fighterKey = "temple_fighter";
		public List<int>      temple_fighter;
		public void Set_temple_fighter()
        {
	        GDEDataManager.SetIntList(_key, temple_fighterKey, temple_fighter);
		}
		
        static string temple_rangerKey = "temple_ranger";
		public List<int>      temple_ranger;
		public void Set_temple_ranger()
        {
	        GDEDataManager.SetIntList(_key, temple_rangerKey, temple_ranger);
		}
		
        static string temple_priestKey = "temple_priest";
		public List<int>      temple_priest;
		public void Set_temple_priest()
        {
	        GDEDataManager.SetIntList(_key, temple_priestKey, temple_priest);
		}
		
        static string temple_casterKey = "temple_caster";
		public List<int>      temple_caster;
		public void Set_temple_caster()
        {
	        GDEDataManager.SetIntList(_key, temple_casterKey, temple_caster);
		}
		
        static string bossKeysKey = "bossKeys";
		public List<int>      bossKeys;
		public void Set_bossKeys()
        {
	        GDEDataManager.SetIntList(_key, bossKeysKey, bossKeys);
		}
		
        static string bossKeyUsedKey = "bossKeyUsed";
		public List<int>      bossKeyUsed;
		public void Set_bossKeyUsed()
        {
	        GDEDataManager.SetIntList(_key, bossKeyUsedKey, bossKeyUsed);
		}
		

        static string herosOwnedKey = "herosOwned";
		public List<GDEHeroData>      herosOwned;
		public void Set_herosOwned()
        {
	        GDEDataManager.SetCustomList(_key, herosOwnedKey, herosOwned);
		}
		
        static string heroesTeamKey = "heroesTeam";
		public List<GDEunitTeamData>      heroesTeam;
		public void Set_heroesTeam()
        {
	        GDEDataManager.SetCustomList(_key, heroesTeamKey, heroesTeam);
		}
		
        static string consumablesKey = "consumables";
		public List<GDEItemData>      consumables;
		public void Set_consumables()
        {
	        GDEDataManager.SetCustomList(_key, consumablesKey, consumables);
		}
		
        static string equipsOwnedKey = "equipsOwned";
		public List<GDEEquipmentData>      equipsOwned;
		public void Set_equipsOwned()
        {
	        GDEDataManager.SetCustomList(_key, equipsOwnedKey, equipsOwned);
		}
		
        static string propsTeamKey = "propsTeam";
		public List<GDEItemData>      propsTeam;
		public void Set_propsTeam()
        {
	        GDEDataManager.SetCustomList(_key, propsTeamKey, propsTeam);
		}
		
        static string TimeTaskListKey = "TimeTaskList";
		public List<GDEtimeTaskData>      TimeTaskList;
		public void Set_TimeTaskList()
        {
	        GDEDataManager.SetCustomList(_key, TimeTaskListKey, TimeTaskList);
		}
		
        static string goddessOwnedKey = "goddessOwned";
		public List<GDEgoddessData>      goddessOwned;
		public void Set_goddessOwned()
        {
	        GDEDataManager.SetCustomList(_key, goddessOwnedKey, goddessOwned);
		}
		
        static string buildingsOwnedKey = "buildingsOwned";
		public List<GDEtownBuildingData>      buildingsOwned;
		public void Set_buildingsOwned()
        {
	        GDEDataManager.SetCustomList(_key, buildingsOwnedKey, buildingsOwned);
		}
		
        static string ItemsOwnedKey = "ItemsOwned";
		public List<GDEItemData>      ItemsOwned;
		public void Set_ItemsOwned()
        {
	        GDEDataManager.SetCustomList(_key, ItemsOwnedKey, ItemsOwned);
		}
		
        static string NPCListKey = "NPCList";
		public List<GDENPCData>      NPCList;
		public void Set_NPCList()
        {
	        GDEDataManager.SetCustomList(_key, NPCListKey, NPCList);
		}
		
        static string RunesOwnedKey = "RunesOwned";
		public List<GDERuneData>      RunesOwned;
		public void Set_RunesOwned()
        {
	        GDEDataManager.SetCustomList(_key, RunesOwnedKey, RunesOwned);
		}
		
        static string AltarPoolListKey = "AltarPoolList";
		public List<GDEHeroAltarPoolData>      AltarPoolList;
		public void Set_AltarPoolList()
        {
	        GDEDataManager.SetCustomList(_key, AltarPoolListKey, AltarPoolList);
		}
		

        public GDEPlayerData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Player");
			
            dict.Merge(true, maxPassSection.ToGDEDict(maxPassSectionKey));
            dict.Merge(true, lastPassSection.ToGDEDict(lastPassSectionKey));
            dict.Merge(true, maxDurgeonPassLevel.ToGDEDict(maxDurgeonPassLevelKey));
            dict.Merge(true, coin.ToGDEDict(coinKey));
            dict.Merge(true, addGoldPerc.ToGDEDict(addGoldPercKey));
            dict.Merge(true, allBufPerc.ToGDEDict(allBufPercKey));
            dict.Merge(true, newBestLevel.ToGDEDict(newBestLevelKey));
            dict.Merge(true, dimension.ToGDEDict(dimensionKey));
            dict.Merge(true, damond.ToGDEDict(damondKey));
            dict.Merge(true, sickBedNum.ToGDEDict(sickBedNumKey));
            dict.Merge(true, honorPoint.ToGDEDict(honorPointKey));
            dict.Merge(true, JianCai.ToGDEDict(JianCaiKey));

            dict.Merge(true, temple_fighter.ToGDEDict(temple_fighterKey));
            dict.Merge(true, temple_ranger.ToGDEDict(temple_rangerKey));
            dict.Merge(true, temple_priest.ToGDEDict(temple_priestKey));
            dict.Merge(true, temple_caster.ToGDEDict(temple_casterKey));
            dict.Merge(true, bossKeys.ToGDEDict(bossKeysKey));
            dict.Merge(true, bossKeyUsed.ToGDEDict(bossKeyUsedKey));

            dict.Merge(true, achievementData.ToGDEDict(achievementDataKey));
            dict.Merge(true, herosOwned.ToGDEDict(herosOwnedKey));
            dict.Merge(true, heroesTeam.ToGDEDict(heroesTeamKey));
            dict.Merge(true, consumables.ToGDEDict(consumablesKey));
            dict.Merge(true, equipsOwned.ToGDEDict(equipsOwnedKey));
            dict.Merge(true, propsTeam.ToGDEDict(propsTeamKey));
            dict.Merge(true, TimeTaskList.ToGDEDict(TimeTaskListKey));
            dict.Merge(true, goddessOwned.ToGDEDict(goddessOwnedKey));
            dict.Merge(true, buildingsOwned.ToGDEDict(buildingsOwnedKey));
            dict.Merge(true, ItemsOwned.ToGDEDict(ItemsOwnedKey));
            dict.Merge(true, NPCList.ToGDEDict(NPCListKey));
            dict.Merge(true, RunesOwned.ToGDEDict(RunesOwnedKey));
            dict.Merge(true, AltarPoolList.ToGDEDict(AltarPoolListKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(achievementData, rebuildKeyList);
            achievementData.UpdateCustomItems(rebuildKeyList);
            if (herosOwned != null)
            {
                for(int x=0;  x<herosOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(herosOwned[x], rebuildKeyList);
                    herosOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (heroesTeam != null)
            {
                for(int x=0;  x<heroesTeam.Count;  x++)
                {
                    GDEDataManager.UpdateItem(heroesTeam[x], rebuildKeyList);
                    heroesTeam[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (consumables != null)
            {
                for(int x=0;  x<consumables.Count;  x++)
                {
                    GDEDataManager.UpdateItem(consumables[x], rebuildKeyList);
                    consumables[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (equipsOwned != null)
            {
                for(int x=0;  x<equipsOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(equipsOwned[x], rebuildKeyList);
                    equipsOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (propsTeam != null)
            {
                for(int x=0;  x<propsTeam.Count;  x++)
                {
                    GDEDataManager.UpdateItem(propsTeam[x], rebuildKeyList);
                    propsTeam[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (TimeTaskList != null)
            {
                for(int x=0;  x<TimeTaskList.Count;  x++)
                {
                    GDEDataManager.UpdateItem(TimeTaskList[x], rebuildKeyList);
                    TimeTaskList[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (goddessOwned != null)
            {
                for(int x=0;  x<goddessOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(goddessOwned[x], rebuildKeyList);
                    goddessOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (buildingsOwned != null)
            {
                for(int x=0;  x<buildingsOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(buildingsOwned[x], rebuildKeyList);
                    buildingsOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (ItemsOwned != null)
            {
                for(int x=0;  x<ItemsOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(ItemsOwned[x], rebuildKeyList);
                    ItemsOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (NPCList != null)
            {
                for(int x=0;  x<NPCList.Count;  x++)
                {
                    GDEDataManager.UpdateItem(NPCList[x], rebuildKeyList);
                    NPCList[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (RunesOwned != null)
            {
                for(int x=0;  x<RunesOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(RunesOwned[x], rebuildKeyList);
                    RunesOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
            if (AltarPoolList != null)
            {
                for(int x=0;  x<AltarPoolList.Count;  x++)
                {
                    GDEDataManager.UpdateItem(AltarPoolList[x], rebuildKeyList);
                    AltarPoolList[x].UpdateCustomItems(rebuildKeyList);
                }
            }
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(maxPassSectionKey, out _maxPassSection);
                dict.TryGetInt(lastPassSectionKey, out _lastPassSection);
                dict.TryGetInt(maxDurgeonPassLevelKey, out _maxDurgeonPassLevel);
                dict.TryGetInt(coinKey, out _coin);
                dict.TryGetInt(addGoldPercKey, out _addGoldPerc);
                dict.TryGetInt(allBufPercKey, out _allBufPerc);
                dict.TryGetInt(newBestLevelKey, out _newBestLevel);
                dict.TryGetInt(dimensionKey, out _dimension);
                dict.TryGetInt(damondKey, out _damond);
                dict.TryGetInt(sickBedNumKey, out _sickBedNum);
                dict.TryGetInt(honorPointKey, out _honorPoint);
                dict.TryGetInt(JianCaiKey, out _JianCai);

                string customDataKey;
                dict.TryGetString(achievementDataKey, out customDataKey);
				_achievementData = new GDEAchievementData(customDataKey);

                dict.TryGetIntList(temple_fighterKey, out temple_fighter);
                dict.TryGetIntList(temple_rangerKey, out temple_ranger);
                dict.TryGetIntList(temple_priestKey, out temple_priest);
                dict.TryGetIntList(temple_casterKey, out temple_caster);
                dict.TryGetIntList(bossKeysKey, out bossKeys);
                dict.TryGetIntList(bossKeyUsedKey, out bossKeyUsed);

                dict.TryGetCustomList(herosOwnedKey, out herosOwned);
                dict.TryGetCustomList(heroesTeamKey, out heroesTeam);
                dict.TryGetCustomList(consumablesKey, out consumables);
                dict.TryGetCustomList(equipsOwnedKey, out equipsOwned);
                dict.TryGetCustomList(propsTeamKey, out propsTeam);
                dict.TryGetCustomList(TimeTaskListKey, out TimeTaskList);
                dict.TryGetCustomList(goddessOwnedKey, out goddessOwned);
                dict.TryGetCustomList(buildingsOwnedKey, out buildingsOwned);
                dict.TryGetCustomList(ItemsOwnedKey, out ItemsOwned);
                dict.TryGetCustomList(NPCListKey, out NPCList);
                dict.TryGetCustomList(RunesOwnedKey, out RunesOwned);
                dict.TryGetCustomList(AltarPoolListKey, out AltarPoolList);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _maxPassSection = GDEDataManager.GetInt(_key, maxPassSectionKey, _maxPassSection);
            _lastPassSection = GDEDataManager.GetInt(_key, lastPassSectionKey, _lastPassSection);
            _maxDurgeonPassLevel = GDEDataManager.GetInt(_key, maxDurgeonPassLevelKey, _maxDurgeonPassLevel);
            _coin = GDEDataManager.GetInt(_key, coinKey, _coin);
            _addGoldPerc = GDEDataManager.GetInt(_key, addGoldPercKey, _addGoldPerc);
            _allBufPerc = GDEDataManager.GetInt(_key, allBufPercKey, _allBufPerc);
            _newBestLevel = GDEDataManager.GetInt(_key, newBestLevelKey, _newBestLevel);
            _dimension = GDEDataManager.GetInt(_key, dimensionKey, _dimension);
            _damond = GDEDataManager.GetInt(_key, damondKey, _damond);
            _sickBedNum = GDEDataManager.GetInt(_key, sickBedNumKey, _sickBedNum);
            _honorPoint = GDEDataManager.GetInt(_key, honorPointKey, _honorPoint);
            _JianCai = GDEDataManager.GetInt(_key, JianCaiKey, _JianCai);

            _achievementData = GDEDataManager.GetCustom(_key, achievementDataKey, _achievementData);

            temple_fighter = GDEDataManager.GetIntList(_key, temple_fighterKey, temple_fighter);
            temple_ranger = GDEDataManager.GetIntList(_key, temple_rangerKey, temple_ranger);
            temple_priest = GDEDataManager.GetIntList(_key, temple_priestKey, temple_priest);
            temple_caster = GDEDataManager.GetIntList(_key, temple_casterKey, temple_caster);
            bossKeys = GDEDataManager.GetIntList(_key, bossKeysKey, bossKeys);
            bossKeyUsed = GDEDataManager.GetIntList(_key, bossKeyUsedKey, bossKeyUsed);

            herosOwned = GDEDataManager.GetCustomList(_key, herosOwnedKey, herosOwned);
            heroesTeam = GDEDataManager.GetCustomList(_key, heroesTeamKey, heroesTeam);
            consumables = GDEDataManager.GetCustomList(_key, consumablesKey, consumables);
            equipsOwned = GDEDataManager.GetCustomList(_key, equipsOwnedKey, equipsOwned);
            propsTeam = GDEDataManager.GetCustomList(_key, propsTeamKey, propsTeam);
            TimeTaskList = GDEDataManager.GetCustomList(_key, TimeTaskListKey, TimeTaskList);
            goddessOwned = GDEDataManager.GetCustomList(_key, goddessOwnedKey, goddessOwned);
            buildingsOwned = GDEDataManager.GetCustomList(_key, buildingsOwnedKey, buildingsOwned);
            ItemsOwned = GDEDataManager.GetCustomList(_key, ItemsOwnedKey, ItemsOwned);
            NPCList = GDEDataManager.GetCustomList(_key, NPCListKey, NPCList);
            RunesOwned = GDEDataManager.GetCustomList(_key, RunesOwnedKey, RunesOwned);
            AltarPoolList = GDEDataManager.GetCustomList(_key, AltarPoolListKey, AltarPoolList);
        }

        public GDEPlayerData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEPlayerData newClone = new GDEPlayerData(newKey);

            newClone.maxPassSection = maxPassSection;
            newClone.lastPassSection = lastPassSection;
            newClone.maxDurgeonPassLevel = maxDurgeonPassLevel;
            newClone.coin = coin;
            newClone.addGoldPerc = addGoldPerc;
            newClone.allBufPerc = allBufPerc;
            newClone.newBestLevel = newBestLevel;
            newClone.dimension = dimension;
            newClone.damond = damond;
            newClone.sickBedNum = sickBedNum;
            newClone.honorPoint = honorPoint;
            newClone.JianCai = JianCai;

            newClone.achievementData = achievementData;

            newClone.temple_fighter = new List<int>(temple_fighter);
			newClone.Set_temple_fighter();
            newClone.temple_ranger = new List<int>(temple_ranger);
			newClone.Set_temple_ranger();
            newClone.temple_priest = new List<int>(temple_priest);
			newClone.Set_temple_priest();
            newClone.temple_caster = new List<int>(temple_caster);
			newClone.Set_temple_caster();
            newClone.bossKeys = new List<int>(bossKeys);
			newClone.Set_bossKeys();
            newClone.bossKeyUsed = new List<int>(bossKeyUsed);
			newClone.Set_bossKeyUsed();

            newClone.herosOwned = new List<GDEHeroData>(herosOwned);
			newClone.Set_herosOwned();
            newClone.heroesTeam = new List<GDEunitTeamData>(heroesTeam);
			newClone.Set_heroesTeam();
            newClone.consumables = new List<GDEItemData>(consumables);
			newClone.Set_consumables();
            newClone.equipsOwned = new List<GDEEquipmentData>(equipsOwned);
			newClone.Set_equipsOwned();
            newClone.propsTeam = new List<GDEItemData>(propsTeam);
			newClone.Set_propsTeam();
            newClone.TimeTaskList = new List<GDEtimeTaskData>(TimeTaskList);
			newClone.Set_TimeTaskList();
            newClone.goddessOwned = new List<GDEgoddessData>(goddessOwned);
			newClone.Set_goddessOwned();
            newClone.buildingsOwned = new List<GDEtownBuildingData>(buildingsOwned);
			newClone.Set_buildingsOwned();
            newClone.ItemsOwned = new List<GDEItemData>(ItemsOwned);
			newClone.Set_ItemsOwned();
            newClone.NPCList = new List<GDENPCData>(NPCList);
			newClone.Set_NPCList();
            newClone.RunesOwned = new List<GDERuneData>(RunesOwned);
			newClone.Set_RunesOwned();
            newClone.AltarPoolList = new List<GDEHeroAltarPoolData>(AltarPoolList);
			newClone.Set_AltarPoolList();

            return newClone;
		}

        public GDEPlayerData DeepClone()
		{
			GDEPlayerData newClone = ShallowClone();
            newClone.achievementData = achievementData.DeepClone();

            newClone.herosOwned = new List<GDEHeroData>();
			if (herosOwned != null)
			{
				foreach(var val in herosOwned)
					newClone.herosOwned.Add(val.DeepClone());
			}
			newClone.Set_herosOwned();
            newClone.heroesTeam = new List<GDEunitTeamData>();
			if (heroesTeam != null)
			{
				foreach(var val in heroesTeam)
					newClone.heroesTeam.Add(val.DeepClone());
			}
			newClone.Set_heroesTeam();
            newClone.consumables = new List<GDEItemData>();
			if (consumables != null)
			{
				foreach(var val in consumables)
					newClone.consumables.Add(val.DeepClone());
			}
			newClone.Set_consumables();
            newClone.equipsOwned = new List<GDEEquipmentData>();
			if (equipsOwned != null)
			{
				foreach(var val in equipsOwned)
					newClone.equipsOwned.Add(val.DeepClone());
			}
			newClone.Set_equipsOwned();
            newClone.propsTeam = new List<GDEItemData>();
			if (propsTeam != null)
			{
				foreach(var val in propsTeam)
					newClone.propsTeam.Add(val.DeepClone());
			}
			newClone.Set_propsTeam();
            newClone.TimeTaskList = new List<GDEtimeTaskData>();
			if (TimeTaskList != null)
			{
				foreach(var val in TimeTaskList)
					newClone.TimeTaskList.Add(val.DeepClone());
			}
			newClone.Set_TimeTaskList();
            newClone.goddessOwned = new List<GDEgoddessData>();
			if (goddessOwned != null)
			{
				foreach(var val in goddessOwned)
					newClone.goddessOwned.Add(val.DeepClone());
			}
			newClone.Set_goddessOwned();
            newClone.buildingsOwned = new List<GDEtownBuildingData>();
			if (buildingsOwned != null)
			{
				foreach(var val in buildingsOwned)
					newClone.buildingsOwned.Add(val.DeepClone());
			}
			newClone.Set_buildingsOwned();
            newClone.ItemsOwned = new List<GDEItemData>();
			if (ItemsOwned != null)
			{
				foreach(var val in ItemsOwned)
					newClone.ItemsOwned.Add(val.DeepClone());
			}
			newClone.Set_ItemsOwned();
            newClone.NPCList = new List<GDENPCData>();
			if (NPCList != null)
			{
				foreach(var val in NPCList)
					newClone.NPCList.Add(val.DeepClone());
			}
			newClone.Set_NPCList();
            newClone.RunesOwned = new List<GDERuneData>();
			if (RunesOwned != null)
			{
				foreach(var val in RunesOwned)
					newClone.RunesOwned.Add(val.DeepClone());
			}
			newClone.Set_RunesOwned();
            newClone.AltarPoolList = new List<GDEHeroAltarPoolData>();
			if (AltarPoolList != null)
			{
				foreach(var val in AltarPoolList)
					newClone.AltarPoolList.Add(val.DeepClone());
			}
			newClone.Set_AltarPoolList();
            return newClone;
		}

        public void Reset_maxPassSection()
        {
            GDEDataManager.ResetToDefault(_key, maxPassSectionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(maxPassSectionKey, out _maxPassSection);
        }

        public void Reset_lastPassSection()
        {
            GDEDataManager.ResetToDefault(_key, lastPassSectionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(lastPassSectionKey, out _lastPassSection);
        }

        public void Reset_maxDurgeonPassLevel()
        {
            GDEDataManager.ResetToDefault(_key, maxDurgeonPassLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(maxDurgeonPassLevelKey, out _maxDurgeonPassLevel);
        }

        public void Reset_coin()
        {
            GDEDataManager.ResetToDefault(_key, coinKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(coinKey, out _coin);
        }

        public void Reset_addGoldPerc()
        {
            GDEDataManager.ResetToDefault(_key, addGoldPercKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(addGoldPercKey, out _addGoldPerc);
        }

        public void Reset_allBufPerc()
        {
            GDEDataManager.ResetToDefault(_key, allBufPercKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(allBufPercKey, out _allBufPerc);
        }

        public void Reset_newBestLevel()
        {
            GDEDataManager.ResetToDefault(_key, newBestLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(newBestLevelKey, out _newBestLevel);
        }

        public void Reset_dimension()
        {
            GDEDataManager.ResetToDefault(_key, dimensionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dimensionKey, out _dimension);
        }

        public void Reset_damond()
        {
            GDEDataManager.ResetToDefault(_key, damondKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(damondKey, out _damond);
        }

        public void Reset_sickBedNum()
        {
            GDEDataManager.ResetToDefault(_key, sickBedNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(sickBedNumKey, out _sickBedNum);
        }

        public void Reset_honorPoint()
        {
            GDEDataManager.ResetToDefault(_key, honorPointKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(honorPointKey, out _honorPoint);
        }

        public void Reset_JianCai()
        {
            GDEDataManager.ResetToDefault(_key, JianCaiKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(JianCaiKey, out _JianCai);
        }

        public void Reset_temple_fighter()
        {
	        GDEDataManager.ResetToDefault(_key, temple_fighterKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(temple_fighterKey, out temple_fighter);
        }
		
        public void Reset_temple_ranger()
        {
	        GDEDataManager.ResetToDefault(_key, temple_rangerKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(temple_rangerKey, out temple_ranger);
        }
		
        public void Reset_temple_priest()
        {
	        GDEDataManager.ResetToDefault(_key, temple_priestKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(temple_priestKey, out temple_priest);
        }
		
        public void Reset_temple_caster()
        {
	        GDEDataManager.ResetToDefault(_key, temple_casterKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(temple_casterKey, out temple_caster);
        }
		
        public void Reset_bossKeys()
        {
	        GDEDataManager.ResetToDefault(_key, bossKeysKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(bossKeysKey, out bossKeys);
        }
		
        public void Reset_bossKeyUsed()
        {
	        GDEDataManager.ResetToDefault(_key, bossKeyUsedKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(bossKeyUsedKey, out bossKeyUsed);
        }
		

        public void Reset_achievementData()
		{
			GDEDataManager.ResetToDefault(_key, achievementDataKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(achievementDataKey, out customDataKey);
			_achievementData = new GDEAchievementData(customDataKey);

			achievementData.ResetAll();
		}

        public void Reset_herosOwned()
		{
			GDEDataManager.ResetToDefault(_key, herosOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(herosOwnedKey, out herosOwned);
			herosOwned = GDEDataManager.GetCustomList(_key, herosOwnedKey, herosOwned);

			herosOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_heroesTeam()
		{
			GDEDataManager.ResetToDefault(_key, heroesTeamKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(heroesTeamKey, out heroesTeam);
			heroesTeam = GDEDataManager.GetCustomList(_key, heroesTeamKey, heroesTeam);

			heroesTeam.ForEach(x => x.ResetAll());
		}
        public void Reset_consumables()
		{
			GDEDataManager.ResetToDefault(_key, consumablesKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(consumablesKey, out consumables);
			consumables = GDEDataManager.GetCustomList(_key, consumablesKey, consumables);

			consumables.ForEach(x => x.ResetAll());
		}
        public void Reset_equipsOwned()
		{
			GDEDataManager.ResetToDefault(_key, equipsOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(equipsOwnedKey, out equipsOwned);
			equipsOwned = GDEDataManager.GetCustomList(_key, equipsOwnedKey, equipsOwned);

			equipsOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_propsTeam()
		{
			GDEDataManager.ResetToDefault(_key, propsTeamKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(propsTeamKey, out propsTeam);
			propsTeam = GDEDataManager.GetCustomList(_key, propsTeamKey, propsTeam);

			propsTeam.ForEach(x => x.ResetAll());
		}
        public void Reset_TimeTaskList()
		{
			GDEDataManager.ResetToDefault(_key, TimeTaskListKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(TimeTaskListKey, out TimeTaskList);
			TimeTaskList = GDEDataManager.GetCustomList(_key, TimeTaskListKey, TimeTaskList);

			TimeTaskList.ForEach(x => x.ResetAll());
		}
        public void Reset_goddessOwned()
		{
			GDEDataManager.ResetToDefault(_key, goddessOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(goddessOwnedKey, out goddessOwned);
			goddessOwned = GDEDataManager.GetCustomList(_key, goddessOwnedKey, goddessOwned);

			goddessOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_buildingsOwned()
		{
			GDEDataManager.ResetToDefault(_key, buildingsOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(buildingsOwnedKey, out buildingsOwned);
			buildingsOwned = GDEDataManager.GetCustomList(_key, buildingsOwnedKey, buildingsOwned);

			buildingsOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_ItemsOwned()
		{
			GDEDataManager.ResetToDefault(_key, ItemsOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(ItemsOwnedKey, out ItemsOwned);
			ItemsOwned = GDEDataManager.GetCustomList(_key, ItemsOwnedKey, ItemsOwned);

			ItemsOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_NPCList()
		{
			GDEDataManager.ResetToDefault(_key, NPCListKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(NPCListKey, out NPCList);
			NPCList = GDEDataManager.GetCustomList(_key, NPCListKey, NPCList);

			NPCList.ForEach(x => x.ResetAll());
		}
        public void Reset_RunesOwned()
		{
			GDEDataManager.ResetToDefault(_key, RunesOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(RunesOwnedKey, out RunesOwned);
			RunesOwned = GDEDataManager.GetCustomList(_key, RunesOwnedKey, RunesOwned);

			RunesOwned.ForEach(x => x.ResetAll());
		}
        public void Reset_AltarPoolList()
		{
			GDEDataManager.ResetToDefault(_key, AltarPoolListKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(AltarPoolListKey, out AltarPoolList);
			AltarPoolList = GDEDataManager.GetCustomList(_key, AltarPoolListKey, AltarPoolList);

			AltarPoolList.ForEach(x => x.ResetAll());
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, temple_fighterKey);
            GDEDataManager.ResetToDefault(_key, temple_rangerKey);
            GDEDataManager.ResetToDefault(_key, temple_priestKey);
            GDEDataManager.ResetToDefault(_key, temple_casterKey);
            GDEDataManager.ResetToDefault(_key, bossKeysKey);
            GDEDataManager.ResetToDefault(_key, bossKeyUsedKey);
            GDEDataManager.ResetToDefault(_key, lastPassSectionKey);
            GDEDataManager.ResetToDefault(_key, maxDurgeonPassLevelKey);
            GDEDataManager.ResetToDefault(_key, herosOwnedKey);
            GDEDataManager.ResetToDefault(_key, coinKey);
            GDEDataManager.ResetToDefault(_key, addGoldPercKey);
            GDEDataManager.ResetToDefault(_key, allBufPercKey);
            GDEDataManager.ResetToDefault(_key, newBestLevelKey);
            GDEDataManager.ResetToDefault(_key, dimensionKey);
            GDEDataManager.ResetToDefault(_key, equipsOwnedKey);
            GDEDataManager.ResetToDefault(_key, consumablesKey);
            GDEDataManager.ResetToDefault(_key, propsTeamKey);
            GDEDataManager.ResetToDefault(_key, heroesTeamKey);
            GDEDataManager.ResetToDefault(_key, damondKey);
            GDEDataManager.ResetToDefault(_key, TimeTaskListKey);
            GDEDataManager.ResetToDefault(_key, sickBedNumKey);
            GDEDataManager.ResetToDefault(_key, maxPassSectionKey);
            GDEDataManager.ResetToDefault(_key, goddessOwnedKey);
            GDEDataManager.ResetToDefault(_key, buildingsOwnedKey);
            GDEDataManager.ResetToDefault(_key, honorPointKey);
            GDEDataManager.ResetToDefault(_key, achievementDataKey);
            GDEDataManager.ResetToDefault(_key, JianCaiKey);
            GDEDataManager.ResetToDefault(_key, ItemsOwnedKey);
            GDEDataManager.ResetToDefault(_key, NPCListKey);
            GDEDataManager.ResetToDefault(_key, RunesOwnedKey);
            GDEDataManager.ResetToDefault(_key, AltarPoolListKey);

            Reset_achievementData();
            Reset_herosOwned();
            Reset_heroesTeam();
            Reset_consumables();
            Reset_equipsOwned();
            Reset_propsTeam();
            Reset_TimeTaskList();
            Reset_goddessOwned();
            Reset_buildingsOwned();
            Reset_ItemsOwned();
            Reset_NPCList();
            Reset_RunesOwned();
            Reset_AltarPoolList();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
