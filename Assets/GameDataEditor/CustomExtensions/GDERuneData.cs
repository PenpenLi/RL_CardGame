// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDERuneData : IGDEData
    {
        static string lockedKey = "locked";
		bool _locked;
        public bool locked
        {
            get { return _locked; }
            set {
                if (_locked != value)
                {
                    _locked = value;
					GDEDataManager.SetBool(_key, lockedKey, _locked);
                }
            }
        }

        static string hashcodeKey = "hashcode";
		int _hashcode;
        public int hashcode
        {
            get { return _hashcode; }
            set {
                if (_hashcode != value)
                {
                    _hashcode = value;
					GDEDataManager.SetInt(_key, hashcodeKey, _hashcode);
                }
            }
        }

        static string posInOwnerKey = "posInOwner";
		int _posInOwner;
        public int posInOwner
        {
            get { return _posInOwner; }
            set {
                if (_posInOwner != value)
                {
                    _posInOwner = value;
					GDEDataManager.SetInt(_key, posInOwnerKey, _posInOwner);
                }
            }
        }

        static string qualityKey = "quality";
		int _quality;
        public int quality
        {
            get { return _quality; }
            set {
                if (_quality != value)
                {
                    _quality = value;
					GDEDataManager.SetInt(_key, qualityKey, _quality);
                }
            }
        }

        static string starKey = "star";
		int _star;
        public int star
        {
            get { return _star; }
            set {
                if (_star != value)
                {
                    _star = value;
					GDEDataManager.SetInt(_key, starKey, _star);
                }
            }
        }

        static string levelKey = "level";
		int _level;
        public int level
        {
            get { return _level; }
            set {
                if (_level != value)
                {
                    _level = value;
					GDEDataManager.SetInt(_key, levelKey, _level);
                }
            }
        }

        static string initalQualityKey = "initalQuality";
		float _initalQuality;
        public float initalQuality
        {
            get { return _initalQuality; }
            set {
                if (_initalQuality != value)
                {
                    _initalQuality = value;
					GDEDataManager.SetFloat(_key, initalQualityKey, _initalQuality);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        static string ownerIdKey = "ownerId";
		string _ownerId;
        public string ownerId
        {
            get { return _ownerId; }
            set {
                if (_ownerId != value)
                {
                    _ownerId = value;
					GDEDataManager.SetString(_key, ownerIdKey, _ownerId);
                }
            }
        }

        static string attitubeKey = "attitube";
		GDEgoddessAttiData _attitube;
        public GDEgoddessAttiData attitube
        {
            get { return _attitube; }
            set {
                if (_attitube != value)
                {
                    _attitube = value;
					GDEDataManager.SetCustom(_key, attitubeKey, _attitube);
                }
            }
        }

        public GDERuneData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Rune");
			
            dict.Merge(true, locked.ToGDEDict(lockedKey));
            dict.Merge(true, hashcode.ToGDEDict(hashcodeKey));
            dict.Merge(true, posInOwner.ToGDEDict(posInOwnerKey));
            dict.Merge(true, quality.ToGDEDict(qualityKey));
            dict.Merge(true, star.ToGDEDict(starKey));
            dict.Merge(true, level.ToGDEDict(levelKey));
            dict.Merge(true, initalQuality.ToGDEDict(initalQualityKey));
            dict.Merge(true, id.ToGDEDict(idKey));
            dict.Merge(true, ownerId.ToGDEDict(ownerIdKey));

            dict.Merge(true, attitube.ToGDEDict(attitubeKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(attitube, rebuildKeyList);
            attitube.UpdateCustomItems(rebuildKeyList);
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(lockedKey, out _locked);
                dict.TryGetInt(hashcodeKey, out _hashcode);
                dict.TryGetInt(posInOwnerKey, out _posInOwner);
                dict.TryGetInt(qualityKey, out _quality);
                dict.TryGetInt(starKey, out _star);
                dict.TryGetInt(levelKey, out _level);
                dict.TryGetFloat(initalQualityKey, out _initalQuality);
                dict.TryGetString(idKey, out _id);
                dict.TryGetString(ownerIdKey, out _ownerId);

                string customDataKey;
                dict.TryGetString(attitubeKey, out customDataKey);
				_attitube = new GDEgoddessAttiData(customDataKey);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _locked = GDEDataManager.GetBool(_key, lockedKey, _locked);
            _hashcode = GDEDataManager.GetInt(_key, hashcodeKey, _hashcode);
            _posInOwner = GDEDataManager.GetInt(_key, posInOwnerKey, _posInOwner);
            _quality = GDEDataManager.GetInt(_key, qualityKey, _quality);
            _star = GDEDataManager.GetInt(_key, starKey, _star);
            _level = GDEDataManager.GetInt(_key, levelKey, _level);
            _initalQuality = GDEDataManager.GetFloat(_key, initalQualityKey, _initalQuality);
            _id = GDEDataManager.GetString(_key, idKey, _id);
            _ownerId = GDEDataManager.GetString(_key, ownerIdKey, _ownerId);

            _attitube = GDEDataManager.GetCustom(_key, attitubeKey, _attitube);
        }

        public GDERuneData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDERuneData newClone = new GDERuneData(newKey);

            newClone.locked = locked;
            newClone.hashcode = hashcode;
            newClone.posInOwner = posInOwner;
            newClone.quality = quality;
            newClone.star = star;
            newClone.level = level;
            newClone.initalQuality = initalQuality;
            newClone.id = id;
            newClone.ownerId = ownerId;

            newClone.attitube = attitube;

            return newClone;
		}

        public GDERuneData DeepClone()
		{
			GDERuneData newClone = ShallowClone();
            newClone.attitube = attitube.DeepClone();
            return newClone;
		}

        public void Reset_locked()
        {
            GDEDataManager.ResetToDefault(_key, lockedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(lockedKey, out _locked);
        }

        public void Reset_hashcode()
        {
            GDEDataManager.ResetToDefault(_key, hashcodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(hashcodeKey, out _hashcode);
        }

        public void Reset_posInOwner()
        {
            GDEDataManager.ResetToDefault(_key, posInOwnerKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(posInOwnerKey, out _posInOwner);
        }

        public void Reset_quality()
        {
            GDEDataManager.ResetToDefault(_key, qualityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(qualityKey, out _quality);
        }

        public void Reset_star()
        {
            GDEDataManager.ResetToDefault(_key, starKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(starKey, out _star);
        }

        public void Reset_level()
        {
            GDEDataManager.ResetToDefault(_key, levelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(levelKey, out _level);
        }

        public void Reset_initalQuality()
        {
            GDEDataManager.ResetToDefault(_key, initalQualityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(initalQualityKey, out _initalQuality);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void Reset_ownerId()
        {
            GDEDataManager.ResetToDefault(_key, ownerIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ownerIdKey, out _ownerId);
        }

        public void Reset_attitube()
		{
			GDEDataManager.ResetToDefault(_key, attitubeKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(attitubeKey, out customDataKey);
			_attitube = new GDEgoddessAttiData(customDataKey);

			attitube.ResetAll();
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, hashcodeKey);
            GDEDataManager.ResetToDefault(_key, ownerIdKey);
            GDEDataManager.ResetToDefault(_key, posInOwnerKey);
            GDEDataManager.ResetToDefault(_key, lockedKey);
            GDEDataManager.ResetToDefault(_key, initalQualityKey);
            GDEDataManager.ResetToDefault(_key, qualityKey);
            GDEDataManager.ResetToDefault(_key, starKey);
            GDEDataManager.ResetToDefault(_key, levelKey);
            GDEDataManager.ResetToDefault(_key, attitubeKey);

            Reset_attitube();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
