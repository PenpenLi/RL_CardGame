// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEtaskBagData : IGDEData
    {
        static string taskBagTypeKey = "taskBagType";
		int _taskBagType;
        public int taskBagType
        {
            get { return _taskBagType; }
            set {
                if (_taskBagType != value)
                {
                    _taskBagType = value;
					GDEDataManager.SetInt(_key, taskBagTypeKey, _taskBagType);
                }
            }
        }

        static string taskBagIdKey = "taskBagId";
		int _taskBagId;
        public int taskBagId
        {
            get { return _taskBagId; }
            set {
                if (_taskBagId != value)
                {
                    _taskBagId = value;
					GDEDataManager.SetInt(_key, taskBagIdKey, _taskBagId);
                }
            }
        }

        static string stepKey = "step";
		int _step;
        public int step
        {
            get { return _step; }
            set {
                if (_step != value)
                {
                    _step = value;
					GDEDataManager.SetInt(_key, stepKey, _step);
                }
            }
        }

        static string taskBagClassKey = "taskBagClass";
		string _taskBagClass;
        public string taskBagClass
        {
            get { return _taskBagClass; }
            set {
                if (_taskBagClass != value)
                {
                    _taskBagClass = value;
					GDEDataManager.SetString(_key, taskBagClassKey, _taskBagClass);
                }
            }
        }

        static string allTasksKey = "allTasks";
		public List<GDEtimeTaskData>      allTasks;
		public void Set_allTasks()
        {
	        GDEDataManager.SetCustomList(_key, allTasksKey, allTasks);
		}
		

        public GDEtaskBagData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "taskBag");
			
            dict.Merge(true, taskBagType.ToGDEDict(taskBagTypeKey));
            dict.Merge(true, taskBagId.ToGDEDict(taskBagIdKey));
            dict.Merge(true, step.ToGDEDict(stepKey));
            dict.Merge(true, taskBagClass.ToGDEDict(taskBagClassKey));

            dict.Merge(true, allTasks.ToGDEDict(allTasksKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            if (allTasks != null)
            {
                for(int x=0;  x<allTasks.Count;  x++)
                {
                    GDEDataManager.UpdateItem(allTasks[x], rebuildKeyList);
                    allTasks[x].UpdateCustomItems(rebuildKeyList);
                }
            }
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(taskBagTypeKey, out _taskBagType);
                dict.TryGetInt(taskBagIdKey, out _taskBagId);
                dict.TryGetInt(stepKey, out _step);
                dict.TryGetString(taskBagClassKey, out _taskBagClass);

                dict.TryGetCustomList(allTasksKey, out allTasks);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _taskBagType = GDEDataManager.GetInt(_key, taskBagTypeKey, _taskBagType);
            _taskBagId = GDEDataManager.GetInt(_key, taskBagIdKey, _taskBagId);
            _step = GDEDataManager.GetInt(_key, stepKey, _step);
            _taskBagClass = GDEDataManager.GetString(_key, taskBagClassKey, _taskBagClass);

            allTasks = GDEDataManager.GetCustomList(_key, allTasksKey, allTasks);
        }

        public GDEtaskBagData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEtaskBagData newClone = new GDEtaskBagData(newKey);

            newClone.taskBagType = taskBagType;
            newClone.taskBagId = taskBagId;
            newClone.step = step;
            newClone.taskBagClass = taskBagClass;

            newClone.allTasks = new List<GDEtimeTaskData>(allTasks);
			newClone.Set_allTasks();

            return newClone;
		}

        public GDEtaskBagData DeepClone()
		{
			GDEtaskBagData newClone = ShallowClone();
            newClone.allTasks = new List<GDEtimeTaskData>();
			if (allTasks != null)
			{
				foreach(var val in allTasks)
					newClone.allTasks.Add(val.DeepClone());
			}
			newClone.Set_allTasks();
            return newClone;
		}

        public void Reset_taskBagType()
        {
            GDEDataManager.ResetToDefault(_key, taskBagTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(taskBagTypeKey, out _taskBagType);
        }

        public void Reset_taskBagId()
        {
            GDEDataManager.ResetToDefault(_key, taskBagIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(taskBagIdKey, out _taskBagId);
        }

        public void Reset_step()
        {
            GDEDataManager.ResetToDefault(_key, stepKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(stepKey, out _step);
        }

        public void Reset_taskBagClass()
        {
            GDEDataManager.ResetToDefault(_key, taskBagClassKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(taskBagClassKey, out _taskBagClass);
        }

        public void Reset_allTasks()
		{
			GDEDataManager.ResetToDefault(_key, allTasksKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(allTasksKey, out allTasks);
			allTasks = GDEDataManager.GetCustomList(_key, allTasksKey, allTasks);

			allTasks.ForEach(x => x.ResetAll());
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, taskBagTypeKey);
            GDEDataManager.ResetToDefault(_key, taskBagIdKey);
            GDEDataManager.ResetToDefault(_key, stepKey);
            GDEDataManager.ResetToDefault(_key, taskBagClassKey);
            GDEDataManager.ResetToDefault(_key, allTasksKey);

            Reset_allTasks();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
