// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEtimeTaskData : IGDEData
    {
        static string isFinishedKey = "isFinished";
		bool _isFinished;
        public bool isFinished
        {
            get { return _isFinished; }
            set {
                if (_isFinished != value)
                {
                    _isFinished = value;
					GDEDataManager.SetBool(_key, isFinishedKey, _isFinished);
                }
            }
        }

        static string itemCharaKey = "itemChara";
		int _itemChara;
        public int itemChara
        {
            get { return _itemChara; }
            set {
                if (_itemChara != value)
                {
                    _itemChara = value;
					GDEDataManager.SetInt(_key, itemCharaKey, _itemChara);
                }
            }
        }

        static string taskTypeKey = "taskType";
		int _taskType;
        public int taskType
        {
            get { return _taskType; }
            set {
                if (_taskType != value)
                {
                    _taskType = value;
					GDEDataManager.SetInt(_key, taskTypeKey, _taskType);
                }
            }
        }

        static string timeTypeKey = "timeType";
		int _timeType;
        public int timeType
        {
            get { return _timeType; }
            set {
                if (_timeType != value)
                {
                    _timeType = value;
					GDEDataManager.SetInt(_key, timeTypeKey, _timeType);
                }
            }
        }

        static string taskIdKey = "taskId";
		int _taskId;
        public int taskId
        {
            get { return _taskId; }
            set {
                if (_taskId != value)
                {
                    _taskId = value;
					GDEDataManager.SetInt(_key, taskIdKey, _taskId);
                }
            }
        }

        static string startTimeKey = "startTime";
		string _startTime;
        public string startTime
        {
            get { return _startTime; }
            set {
                if (_startTime != value)
                {
                    _startTime = value;
					GDEDataManager.SetString(_key, startTimeKey, _startTime);
                }
            }
        }

        public GDEtimeTaskData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "timeTask");
			
            dict.Merge(true, isFinished.ToGDEDict(isFinishedKey));
            dict.Merge(true, itemChara.ToGDEDict(itemCharaKey));
            dict.Merge(true, taskType.ToGDEDict(taskTypeKey));
            dict.Merge(true, timeType.ToGDEDict(timeTypeKey));
            dict.Merge(true, taskId.ToGDEDict(taskIdKey));
            dict.Merge(true, startTime.ToGDEDict(startTimeKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isFinishedKey, out _isFinished);
                dict.TryGetInt(itemCharaKey, out _itemChara);
                dict.TryGetInt(taskTypeKey, out _taskType);
                dict.TryGetInt(timeTypeKey, out _timeType);
                dict.TryGetInt(taskIdKey, out _taskId);
                dict.TryGetString(startTimeKey, out _startTime);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isFinished = GDEDataManager.GetBool(_key, isFinishedKey, _isFinished);
            _itemChara = GDEDataManager.GetInt(_key, itemCharaKey, _itemChara);
            _taskType = GDEDataManager.GetInt(_key, taskTypeKey, _taskType);
            _timeType = GDEDataManager.GetInt(_key, timeTypeKey, _timeType);
            _taskId = GDEDataManager.GetInt(_key, taskIdKey, _taskId);
            _startTime = GDEDataManager.GetString(_key, startTimeKey, _startTime);
        }

        public GDEtimeTaskData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEtimeTaskData newClone = new GDEtimeTaskData(newKey);

            newClone.isFinished = isFinished;
            newClone.itemChara = itemChara;
            newClone.taskType = taskType;
            newClone.timeType = timeType;
            newClone.taskId = taskId;
            newClone.startTime = startTime;

            return newClone;
		}

        public GDEtimeTaskData DeepClone()
		{
			GDEtimeTaskData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_isFinished()
        {
            GDEDataManager.ResetToDefault(_key, isFinishedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isFinishedKey, out _isFinished);
        }

        public void Reset_itemChara()
        {
            GDEDataManager.ResetToDefault(_key, itemCharaKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(itemCharaKey, out _itemChara);
        }

        public void Reset_taskType()
        {
            GDEDataManager.ResetToDefault(_key, taskTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(taskTypeKey, out _taskType);
        }

        public void Reset_timeType()
        {
            GDEDataManager.ResetToDefault(_key, timeTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(timeTypeKey, out _timeType);
        }

        public void Reset_taskId()
        {
            GDEDataManager.ResetToDefault(_key, taskIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(taskIdKey, out _taskId);
        }

        public void Reset_startTime()
        {
            GDEDataManager.ResetToDefault(_key, startTimeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(startTimeKey, out _startTime);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, itemCharaKey);
            GDEDataManager.ResetToDefault(_key, startTimeKey);
            GDEDataManager.ResetToDefault(_key, taskTypeKey);
            GDEDataManager.ResetToDefault(_key, timeTypeKey);
            GDEDataManager.ResetToDefault(_key, taskIdKey);
            GDEDataManager.ResetToDefault(_key, isFinishedKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
