// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDESettingData : IGDEData
    {
        static string isMusicOnKey = "isMusicOn";
		bool _isMusicOn;
        public bool isMusicOn
        {
            get { return _isMusicOn; }
            set {
                if (_isMusicOn != value)
                {
                    _isMusicOn = value;
					GDEDataManager.SetBool(_key, isMusicOnKey, _isMusicOn);
                }
            }
        }

        static string isSoundEffectOnKey = "isSoundEffectOn";
		bool _isSoundEffectOn;
        public bool isSoundEffectOn
        {
            get { return _isSoundEffectOn; }
            set {
                if (_isSoundEffectOn != value)
                {
                    _isSoundEffectOn = value;
					GDEDataManager.SetBool(_key, isSoundEffectOnKey, _isSoundEffectOn);
                }
            }
        }

        static string isAutoBattleKey = "isAutoBattle";
		bool _isAutoBattle;
        public bool isAutoBattle
        {
            get { return _isAutoBattle; }
            set {
                if (_isAutoBattle != value)
                {
                    _isAutoBattle = value;
					GDEDataManager.SetBool(_key, isAutoBattleKey, _isAutoBattle);
                }
            }
        }

        static string isAutoHangKey = "isAutoHang";
		bool _isAutoHang;
        public bool isAutoHang
        {
            get { return _isAutoHang; }
            set {
                if (_isAutoHang != value)
                {
                    _isAutoHang = value;
					GDEDataManager.SetBool(_key, isAutoHangKey, _isAutoHang);
                }
            }
        }

        static string isFastModeEnabledKey = "isFastModeEnabled";
		bool _isFastModeEnabled;
        public bool isFastModeEnabled
        {
            get { return _isFastModeEnabled; }
            set {
                if (_isFastModeEnabled != value)
                {
                    _isFastModeEnabled = value;
					GDEDataManager.SetBool(_key, isFastModeEnabledKey, _isFastModeEnabled);
                }
            }
        }

        static string HapticTouchEnabledKey = "HapticTouchEnabled";
		bool _HapticTouchEnabled;
        public bool HapticTouchEnabled
        {
            get { return _HapticTouchEnabled; }
            set {
                if (_HapticTouchEnabled != value)
                {
                    _HapticTouchEnabled = value;
					GDEDataManager.SetBool(_key, HapticTouchEnabledKey, _HapticTouchEnabled);
                }
            }
        }

        static string FoundPurchaseStateKey = "FoundPurchaseState";
		bool _FoundPurchaseState;
        public bool FoundPurchaseState
        {
            get { return _FoundPurchaseState; }
            set {
                if (_FoundPurchaseState != value)
                {
                    _FoundPurchaseState = value;
					GDEDataManager.SetBool(_key, FoundPurchaseStateKey, _FoundPurchaseState);
                }
            }
        }

        static string ChargeGiftGotStateKey = "ChargeGiftGotState";
		bool _ChargeGiftGotState;
        public bool ChargeGiftGotState
        {
            get { return _ChargeGiftGotState; }
            set {
                if (_ChargeGiftGotState != value)
                {
                    _ChargeGiftGotState = value;
					GDEDataManager.SetBool(_key, ChargeGiftGotStateKey, _ChargeGiftGotState);
                }
            }
        }

        static string Show7DaysActivityKey = "Show7DaysActivity";
		bool _Show7DaysActivity;
        public bool Show7DaysActivity
        {
            get { return _Show7DaysActivity; }
            set {
                if (_Show7DaysActivity != value)
                {
                    _Show7DaysActivity = value;
					GDEDataManager.SetBool(_key, Show7DaysActivityKey, _Show7DaysActivity);
                }
            }
        }

        static string BattleSpeedKey = "BattleSpeed";
		int _BattleSpeed;
        public int BattleSpeed
        {
            get { return _BattleSpeed; }
            set {
                if (_BattleSpeed != value)
                {
                    _BattleSpeed = value;
					GDEDataManager.SetInt(_key, BattleSpeedKey, _BattleSpeed);
                }
            }
        }

        static string WatchAdsSuccessNumKey = "WatchAdsSuccessNum";
		int _WatchAdsSuccessNum;
        public int WatchAdsSuccessNum
        {
            get { return _WatchAdsSuccessNum; }
            set {
                if (_WatchAdsSuccessNum != value)
                {
                    _WatchAdsSuccessNum = value;
					GDEDataManager.SetInt(_key, WatchAdsSuccessNumKey, _WatchAdsSuccessNum);
                }
            }
        }

        static string ReviveTimesKey = "ReviveTimes";
		int _ReviveTimes;
        public int ReviveTimes
        {
            get { return _ReviveTimes; }
            set {
                if (_ReviveTimes != value)
                {
                    _ReviveTimes = value;
					GDEDataManager.SetInt(_key, ReviveTimesKey, _ReviveTimes);
                }
            }
        }

        static string MainMissionProgressKey = "MainMissionProgress";
		int _MainMissionProgress;
        public int MainMissionProgress
        {
            get { return _MainMissionProgress; }
            set {
                if (_MainMissionProgress != value)
                {
                    _MainMissionProgress = value;
					GDEDataManager.SetInt(_key, MainMissionProgressKey, _MainMissionProgress);
                }
            }
        }

        static string autoBattleHintKey = "autoBattleHint";
		int _autoBattleHint;
        public int autoBattleHint
        {
            get { return _autoBattleHint; }
            set {
                if (_autoBattleHint != value)
                {
                    _autoBattleHint = value;
					GDEDataManager.SetInt(_key, autoBattleHintKey, _autoBattleHint);
                }
            }
        }

        static string FastLeftTimeKey = "FastLeftTime";
		int _FastLeftTime;
        public int FastLeftTime
        {
            get { return _FastLeftTime; }
            set {
                if (_FastLeftTime != value)
                {
                    _FastLeftTime = value;
					GDEDataManager.SetInt(_key, FastLeftTimeKey, _FastLeftTime);
                }
            }
        }

        static string battleTimesKey = "battleTimes";
		int _battleTimes;
        public int battleTimes
        {
            get { return _battleTimes; }
            set {
                if (_battleTimes != value)
                {
                    _battleTimes = value;
					GDEDataManager.SetInt(_key, battleTimesKey, _battleTimes);
                }
            }
        }

        static string first_time_fail_gameKey = "first_time_fail_game";
		int _first_time_fail_game;
        public int first_time_fail_game
        {
            get { return _first_time_fail_game; }
            set {
                if (_first_time_fail_game != value)
                {
                    _first_time_fail_game = value;
					GDEDataManager.SetInt(_key, first_time_fail_gameKey, _first_time_fail_game);
                }
            }
        }

        static string seatUnlockedKey = "seatUnlocked";
		public List<int>      seatUnlocked;
		public void Set_seatUnlocked()
        {
	        GDEDataManager.SetIntList(_key, seatUnlockedKey, seatUnlocked);
		}
		

        public GDESettingData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Setting");
			
            dict.Merge(true, isMusicOn.ToGDEDict(isMusicOnKey));
            dict.Merge(true, isSoundEffectOn.ToGDEDict(isSoundEffectOnKey));
            dict.Merge(true, isAutoBattle.ToGDEDict(isAutoBattleKey));
            dict.Merge(true, isAutoHang.ToGDEDict(isAutoHangKey));
            dict.Merge(true, isFastModeEnabled.ToGDEDict(isFastModeEnabledKey));
            dict.Merge(true, HapticTouchEnabled.ToGDEDict(HapticTouchEnabledKey));
            dict.Merge(true, FoundPurchaseState.ToGDEDict(FoundPurchaseStateKey));
            dict.Merge(true, ChargeGiftGotState.ToGDEDict(ChargeGiftGotStateKey));
            dict.Merge(true, Show7DaysActivity.ToGDEDict(Show7DaysActivityKey));
            dict.Merge(true, BattleSpeed.ToGDEDict(BattleSpeedKey));
            dict.Merge(true, WatchAdsSuccessNum.ToGDEDict(WatchAdsSuccessNumKey));
            dict.Merge(true, ReviveTimes.ToGDEDict(ReviveTimesKey));
            dict.Merge(true, MainMissionProgress.ToGDEDict(MainMissionProgressKey));
            dict.Merge(true, autoBattleHint.ToGDEDict(autoBattleHintKey));
            dict.Merge(true, FastLeftTime.ToGDEDict(FastLeftTimeKey));
            dict.Merge(true, battleTimes.ToGDEDict(battleTimesKey));
            dict.Merge(true, first_time_fail_game.ToGDEDict(first_time_fail_gameKey));

            dict.Merge(true, seatUnlocked.ToGDEDict(seatUnlockedKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isMusicOnKey, out _isMusicOn);
                dict.TryGetBool(isSoundEffectOnKey, out _isSoundEffectOn);
                dict.TryGetBool(isAutoBattleKey, out _isAutoBattle);
                dict.TryGetBool(isAutoHangKey, out _isAutoHang);
                dict.TryGetBool(isFastModeEnabledKey, out _isFastModeEnabled);
                dict.TryGetBool(HapticTouchEnabledKey, out _HapticTouchEnabled);
                dict.TryGetBool(FoundPurchaseStateKey, out _FoundPurchaseState);
                dict.TryGetBool(ChargeGiftGotStateKey, out _ChargeGiftGotState);
                dict.TryGetBool(Show7DaysActivityKey, out _Show7DaysActivity);
                dict.TryGetInt(BattleSpeedKey, out _BattleSpeed);
                dict.TryGetInt(WatchAdsSuccessNumKey, out _WatchAdsSuccessNum);
                dict.TryGetInt(ReviveTimesKey, out _ReviveTimes);
                dict.TryGetInt(MainMissionProgressKey, out _MainMissionProgress);
                dict.TryGetInt(autoBattleHintKey, out _autoBattleHint);
                dict.TryGetInt(FastLeftTimeKey, out _FastLeftTime);
                dict.TryGetInt(battleTimesKey, out _battleTimes);
                dict.TryGetInt(first_time_fail_gameKey, out _first_time_fail_game);

                dict.TryGetIntList(seatUnlockedKey, out seatUnlocked);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isMusicOn = GDEDataManager.GetBool(_key, isMusicOnKey, _isMusicOn);
            _isSoundEffectOn = GDEDataManager.GetBool(_key, isSoundEffectOnKey, _isSoundEffectOn);
            _isAutoBattle = GDEDataManager.GetBool(_key, isAutoBattleKey, _isAutoBattle);
            _isAutoHang = GDEDataManager.GetBool(_key, isAutoHangKey, _isAutoHang);
            _isFastModeEnabled = GDEDataManager.GetBool(_key, isFastModeEnabledKey, _isFastModeEnabled);
            _HapticTouchEnabled = GDEDataManager.GetBool(_key, HapticTouchEnabledKey, _HapticTouchEnabled);
            _FoundPurchaseState = GDEDataManager.GetBool(_key, FoundPurchaseStateKey, _FoundPurchaseState);
            _ChargeGiftGotState = GDEDataManager.GetBool(_key, ChargeGiftGotStateKey, _ChargeGiftGotState);
            _Show7DaysActivity = GDEDataManager.GetBool(_key, Show7DaysActivityKey, _Show7DaysActivity);
            _BattleSpeed = GDEDataManager.GetInt(_key, BattleSpeedKey, _BattleSpeed);
            _WatchAdsSuccessNum = GDEDataManager.GetInt(_key, WatchAdsSuccessNumKey, _WatchAdsSuccessNum);
            _ReviveTimes = GDEDataManager.GetInt(_key, ReviveTimesKey, _ReviveTimes);
            _MainMissionProgress = GDEDataManager.GetInt(_key, MainMissionProgressKey, _MainMissionProgress);
            _autoBattleHint = GDEDataManager.GetInt(_key, autoBattleHintKey, _autoBattleHint);
            _FastLeftTime = GDEDataManager.GetInt(_key, FastLeftTimeKey, _FastLeftTime);
            _battleTimes = GDEDataManager.GetInt(_key, battleTimesKey, _battleTimes);
            _first_time_fail_game = GDEDataManager.GetInt(_key, first_time_fail_gameKey, _first_time_fail_game);

            seatUnlocked = GDEDataManager.GetIntList(_key, seatUnlockedKey, seatUnlocked);
        }

        public GDESettingData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDESettingData newClone = new GDESettingData(newKey);

            newClone.isMusicOn = isMusicOn;
            newClone.isSoundEffectOn = isSoundEffectOn;
            newClone.isAutoBattle = isAutoBattle;
            newClone.isAutoHang = isAutoHang;
            newClone.isFastModeEnabled = isFastModeEnabled;
            newClone.HapticTouchEnabled = HapticTouchEnabled;
            newClone.FoundPurchaseState = FoundPurchaseState;
            newClone.ChargeGiftGotState = ChargeGiftGotState;
            newClone.Show7DaysActivity = Show7DaysActivity;
            newClone.BattleSpeed = BattleSpeed;
            newClone.WatchAdsSuccessNum = WatchAdsSuccessNum;
            newClone.ReviveTimes = ReviveTimes;
            newClone.MainMissionProgress = MainMissionProgress;
            newClone.autoBattleHint = autoBattleHint;
            newClone.FastLeftTime = FastLeftTime;
            newClone.battleTimes = battleTimes;
            newClone.first_time_fail_game = first_time_fail_game;

            newClone.seatUnlocked = new List<int>(seatUnlocked);
			newClone.Set_seatUnlocked();

            return newClone;
		}

        public GDESettingData DeepClone()
		{
			GDESettingData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_isMusicOn()
        {
            GDEDataManager.ResetToDefault(_key, isMusicOnKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isMusicOnKey, out _isMusicOn);
        }

        public void Reset_isSoundEffectOn()
        {
            GDEDataManager.ResetToDefault(_key, isSoundEffectOnKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isSoundEffectOnKey, out _isSoundEffectOn);
        }

        public void Reset_isAutoBattle()
        {
            GDEDataManager.ResetToDefault(_key, isAutoBattleKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isAutoBattleKey, out _isAutoBattle);
        }

        public void Reset_isAutoHang()
        {
            GDEDataManager.ResetToDefault(_key, isAutoHangKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isAutoHangKey, out _isAutoHang);
        }

        public void Reset_isFastModeEnabled()
        {
            GDEDataManager.ResetToDefault(_key, isFastModeEnabledKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isFastModeEnabledKey, out _isFastModeEnabled);
        }

        public void Reset_HapticTouchEnabled()
        {
            GDEDataManager.ResetToDefault(_key, HapticTouchEnabledKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(HapticTouchEnabledKey, out _HapticTouchEnabled);
        }

        public void Reset_FoundPurchaseState()
        {
            GDEDataManager.ResetToDefault(_key, FoundPurchaseStateKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(FoundPurchaseStateKey, out _FoundPurchaseState);
        }

        public void Reset_ChargeGiftGotState()
        {
            GDEDataManager.ResetToDefault(_key, ChargeGiftGotStateKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(ChargeGiftGotStateKey, out _ChargeGiftGotState);
        }

        public void Reset_Show7DaysActivity()
        {
            GDEDataManager.ResetToDefault(_key, Show7DaysActivityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(Show7DaysActivityKey, out _Show7DaysActivity);
        }

        public void Reset_BattleSpeed()
        {
            GDEDataManager.ResetToDefault(_key, BattleSpeedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(BattleSpeedKey, out _BattleSpeed);
        }

        public void Reset_WatchAdsSuccessNum()
        {
            GDEDataManager.ResetToDefault(_key, WatchAdsSuccessNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(WatchAdsSuccessNumKey, out _WatchAdsSuccessNum);
        }

        public void Reset_ReviveTimes()
        {
            GDEDataManager.ResetToDefault(_key, ReviveTimesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(ReviveTimesKey, out _ReviveTimes);
        }

        public void Reset_MainMissionProgress()
        {
            GDEDataManager.ResetToDefault(_key, MainMissionProgressKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(MainMissionProgressKey, out _MainMissionProgress);
        }

        public void Reset_autoBattleHint()
        {
            GDEDataManager.ResetToDefault(_key, autoBattleHintKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(autoBattleHintKey, out _autoBattleHint);
        }

        public void Reset_FastLeftTime()
        {
            GDEDataManager.ResetToDefault(_key, FastLeftTimeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(FastLeftTimeKey, out _FastLeftTime);
        }

        public void Reset_battleTimes()
        {
            GDEDataManager.ResetToDefault(_key, battleTimesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(battleTimesKey, out _battleTimes);
        }

        public void Reset_first_time_fail_game()
        {
            GDEDataManager.ResetToDefault(_key, first_time_fail_gameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(first_time_fail_gameKey, out _first_time_fail_game);
        }

        public void Reset_seatUnlocked()
        {
	        GDEDataManager.ResetToDefault(_key, seatUnlockedKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(seatUnlockedKey, out seatUnlocked);
        }
		

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, isMusicOnKey);
            GDEDataManager.ResetToDefault(_key, isSoundEffectOnKey);
            GDEDataManager.ResetToDefault(_key, isAutoBattleKey);
            GDEDataManager.ResetToDefault(_key, isAutoHangKey);
            GDEDataManager.ResetToDefault(_key, isFastModeEnabledKey);
            GDEDataManager.ResetToDefault(_key, HapticTouchEnabledKey);
            GDEDataManager.ResetToDefault(_key, FoundPurchaseStateKey);
            GDEDataManager.ResetToDefault(_key, ChargeGiftGotStateKey);
            GDEDataManager.ResetToDefault(_key, Show7DaysActivityKey);
            GDEDataManager.ResetToDefault(_key, BattleSpeedKey);
            GDEDataManager.ResetToDefault(_key, WatchAdsSuccessNumKey);
            GDEDataManager.ResetToDefault(_key, ReviveTimesKey);
            GDEDataManager.ResetToDefault(_key, MainMissionProgressKey);
            GDEDataManager.ResetToDefault(_key, autoBattleHintKey);
            GDEDataManager.ResetToDefault(_key, FastLeftTimeKey);
            GDEDataManager.ResetToDefault(_key, battleTimesKey);
            GDEDataManager.ResetToDefault(_key, first_time_fail_gameKey);
            GDEDataManager.ResetToDefault(_key, seatUnlockedKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
