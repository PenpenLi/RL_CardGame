// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEtownBuildingData : IGDEData
    {
        static string expKey = "exp";
		int _exp;
        public int exp
        {
            get { return _exp; }
            set {
                if (_exp != value)
                {
                    _exp = value;
					GDEDataManager.SetInt(_key, expKey, _exp);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        static string NPCKey = "NPC";
		GDENPCData _NPC;
        public GDENPCData NPC
        {
            get { return _NPC; }
            set {
                if (_NPC != value)
                {
                    _NPC = value;
					GDEDataManager.SetCustom(_key, NPCKey, _NPC);
                }
            }
        }

        public GDEtownBuildingData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "townBuilding");
			
            dict.Merge(true, exp.ToGDEDict(expKey));
            dict.Merge(true, id.ToGDEDict(idKey));

            dict.Merge(true, NPC.ToGDEDict(NPCKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(NPC, rebuildKeyList);
            NPC.UpdateCustomItems(rebuildKeyList);
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(expKey, out _exp);
                dict.TryGetString(idKey, out _id);

                string customDataKey;
                dict.TryGetString(NPCKey, out customDataKey);
				_NPC = new GDENPCData(customDataKey);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _exp = GDEDataManager.GetInt(_key, expKey, _exp);
            _id = GDEDataManager.GetString(_key, idKey, _id);

            _NPC = GDEDataManager.GetCustom(_key, NPCKey, _NPC);
        }

        public GDEtownBuildingData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEtownBuildingData newClone = new GDEtownBuildingData(newKey);

            newClone.exp = exp;
            newClone.id = id;

            newClone.NPC = NPC;

            return newClone;
		}

        public GDEtownBuildingData DeepClone()
		{
			GDEtownBuildingData newClone = ShallowClone();
            newClone.NPC = NPC.DeepClone();
            return newClone;
		}

        public void Reset_exp()
        {
            GDEDataManager.ResetToDefault(_key, expKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(expKey, out _exp);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void Reset_NPC()
		{
			GDEDataManager.ResetToDefault(_key, NPCKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(NPCKey, out customDataKey);
			_NPC = new GDENPCData(customDataKey);

			NPC.ResetAll();
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, expKey);
            GDEDataManager.ResetToDefault(_key, NPCKey);

            Reset_NPC();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
