// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEEquipmentData : IGDEData
    {
        static string lockedKey = "locked";
		bool _locked;
        public bool locked
        {
            get { return _locked; }
            set {
                if (_locked != value)
                {
                    _locked = value;
					GDEDataManager.SetBool(_key, lockedKey, _locked);
                }
            }
        }

        static string equipTypeKey = "equipType";
		int _equipType;
        public int equipType
        {
            get { return _equipType; }
            set {
                if (_equipType != value)
                {
                    _equipType = value;
					GDEDataManager.SetInt(_key, equipTypeKey, _equipType);
                }
            }
        }

        static string equipBattleForceKey = "equipBattleForce";
		int _equipBattleForce;
        public int equipBattleForce
        {
            get { return _equipBattleForce; }
            set {
                if (_equipBattleForce != value)
                {
                    _equipBattleForce = value;
					GDEDataManager.SetInt(_key, equipBattleForceKey, _equipBattleForce);
                }
            }
        }

        static string indexKey = "index";
		int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
					GDEDataManager.SetInt(_key, indexKey, _index);
                }
            }
        }

        static string numKey = "num";
		int _num;
        public int num
        {
            get { return _num; }
            set {
                if (_num != value)
                {
                    _num = value;
					GDEDataManager.SetInt(_key, numKey, _num);
                }
            }
        }

        static string hashcodeKey = "hashcode";
		int _hashcode;
        public int hashcode
        {
            get { return _hashcode; }
            set {
                if (_hashcode != value)
                {
                    _hashcode = value;
					GDEDataManager.SetInt(_key, hashcodeKey, _hashcode);
                }
            }
        }

        static string OwnerHashcodeKey = "OwnerHashcode";
		int _OwnerHashcode;
        public int OwnerHashcode
        {
            get { return _OwnerHashcode; }
            set {
                if (_OwnerHashcode != value)
                {
                    _OwnerHashcode = value;
					GDEDataManager.SetInt(_key, OwnerHashcodeKey, _OwnerHashcode);
                }
            }
        }

        static string expKey = "exp";
		int _exp;
        public int exp
        {
            get { return _exp; }
            set {
                if (_exp != value)
                {
                    _exp = value;
					GDEDataManager.SetInt(_key, expKey, _exp);
                }
            }
        }

        static string qualityKey = "quality";
		int _quality;
        public int quality
        {
            get { return _quality; }
            set {
                if (_quality != value)
                {
                    _quality = value;
					GDEDataManager.SetInt(_key, qualityKey, _quality);
                }
            }
        }

        static string initialQualityKey = "initialQuality";
		float _initialQuality;
        public float initialQuality
        {
            get { return _initialQuality; }
            set {
                if (_initialQuality != value)
                {
                    _initialQuality = value;
					GDEDataManager.SetFloat(_key, initialQualityKey, _initialQuality);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        public GDEEquipmentData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Equipment");
			
            dict.Merge(true, locked.ToGDEDict(lockedKey));
            dict.Merge(true, equipType.ToGDEDict(equipTypeKey));
            dict.Merge(true, equipBattleForce.ToGDEDict(equipBattleForceKey));
            dict.Merge(true, index.ToGDEDict(indexKey));
            dict.Merge(true, num.ToGDEDict(numKey));
            dict.Merge(true, hashcode.ToGDEDict(hashcodeKey));
            dict.Merge(true, OwnerHashcode.ToGDEDict(OwnerHashcodeKey));
            dict.Merge(true, exp.ToGDEDict(expKey));
            dict.Merge(true, quality.ToGDEDict(qualityKey));
            dict.Merge(true, initialQuality.ToGDEDict(initialQualityKey));
            dict.Merge(true, id.ToGDEDict(idKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(lockedKey, out _locked);
                dict.TryGetInt(equipTypeKey, out _equipType);
                dict.TryGetInt(equipBattleForceKey, out _equipBattleForce);
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetInt(numKey, out _num);
                dict.TryGetInt(hashcodeKey, out _hashcode);
                dict.TryGetInt(OwnerHashcodeKey, out _OwnerHashcode);
                dict.TryGetInt(expKey, out _exp);
                dict.TryGetInt(qualityKey, out _quality);
                dict.TryGetFloat(initialQualityKey, out _initialQuality);
                dict.TryGetString(idKey, out _id);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _locked = GDEDataManager.GetBool(_key, lockedKey, _locked);
            _equipType = GDEDataManager.GetInt(_key, equipTypeKey, _equipType);
            _equipBattleForce = GDEDataManager.GetInt(_key, equipBattleForceKey, _equipBattleForce);
            _index = GDEDataManager.GetInt(_key, indexKey, _index);
            _num = GDEDataManager.GetInt(_key, numKey, _num);
            _hashcode = GDEDataManager.GetInt(_key, hashcodeKey, _hashcode);
            _OwnerHashcode = GDEDataManager.GetInt(_key, OwnerHashcodeKey, _OwnerHashcode);
            _exp = GDEDataManager.GetInt(_key, expKey, _exp);
            _quality = GDEDataManager.GetInt(_key, qualityKey, _quality);
            _initialQuality = GDEDataManager.GetFloat(_key, initialQualityKey, _initialQuality);
            _id = GDEDataManager.GetString(_key, idKey, _id);
        }

        public GDEEquipmentData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEEquipmentData newClone = new GDEEquipmentData(newKey);

            newClone.locked = locked;
            newClone.equipType = equipType;
            newClone.equipBattleForce = equipBattleForce;
            newClone.index = index;
            newClone.num = num;
            newClone.hashcode = hashcode;
            newClone.OwnerHashcode = OwnerHashcode;
            newClone.exp = exp;
            newClone.quality = quality;
            newClone.initialQuality = initialQuality;
            newClone.id = id;

            return newClone;
		}

        public GDEEquipmentData DeepClone()
		{
			GDEEquipmentData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_locked()
        {
            GDEDataManager.ResetToDefault(_key, lockedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(lockedKey, out _locked);
        }

        public void Reset_equipType()
        {
            GDEDataManager.ResetToDefault(_key, equipTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(equipTypeKey, out _equipType);
        }

        public void Reset_equipBattleForce()
        {
            GDEDataManager.ResetToDefault(_key, equipBattleForceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(equipBattleForceKey, out _equipBattleForce);
        }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_num()
        {
            GDEDataManager.ResetToDefault(_key, numKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(numKey, out _num);
        }

        public void Reset_hashcode()
        {
            GDEDataManager.ResetToDefault(_key, hashcodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(hashcodeKey, out _hashcode);
        }

        public void Reset_OwnerHashcode()
        {
            GDEDataManager.ResetToDefault(_key, OwnerHashcodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(OwnerHashcodeKey, out _OwnerHashcode);
        }

        public void Reset_exp()
        {
            GDEDataManager.ResetToDefault(_key, expKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(expKey, out _exp);
        }

        public void Reset_quality()
        {
            GDEDataManager.ResetToDefault(_key, qualityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(qualityKey, out _quality);
        }

        public void Reset_initialQuality()
        {
            GDEDataManager.ResetToDefault(_key, initialQualityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(initialQualityKey, out _initialQuality);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, equipTypeKey);
            GDEDataManager.ResetToDefault(_key, equipBattleForceKey);
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, numKey);
            GDEDataManager.ResetToDefault(_key, hashcodeKey);
            GDEDataManager.ResetToDefault(_key, OwnerHashcodeKey);
            GDEDataManager.ResetToDefault(_key, lockedKey);
            GDEDataManager.ResetToDefault(_key, expKey);
            GDEDataManager.ResetToDefault(_key, qualityKey);
            GDEDataManager.ResetToDefault(_key, initialQualityKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
