// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEHeroAltarPoolData : IGDEData
    {
        static string NotNormalPoolKey = "NotNormalPool";
		bool _NotNormalPool;
        public bool NotNormalPool
        {
            get { return _NotNormalPool; }
            set {
                if (_NotNormalPool != value)
                {
                    _NotNormalPool = value;
					GDEDataManager.SetBool(_key, NotNormalPoolKey, _NotNormalPool);
                }
            }
        }

        static string UnableKey = "Unable";
		bool _Unable;
        public bool Unable
        {
            get { return _Unable; }
            set {
                if (_Unable != value)
                {
                    _Unable = value;
					GDEDataManager.SetBool(_key, UnableKey, _Unable);
                }
            }
        }

        static string AltarTimesKey = "AltarTimes";
		int _AltarTimes;
        public int AltarTimes
        {
            get { return _AltarTimes; }
            set {
                if (_AltarTimes != value)
                {
                    _AltarTimes = value;
					GDEDataManager.SetInt(_key, AltarTimesKey, _AltarTimes);
                }
            }
        }

        static string PoolCapacityKey = "PoolCapacity";
		int _PoolCapacity;
        public int PoolCapacity
        {
            get { return _PoolCapacity; }
            set {
                if (_PoolCapacity != value)
                {
                    _PoolCapacity = value;
					GDEDataManager.SetInt(_key, PoolCapacityKey, _PoolCapacity);
                }
            }
        }

        static string GetSNumKey = "GetSNum";
		int _GetSNum;
        public int GetSNum
        {
            get { return _GetSNum; }
            set {
                if (_GetSNum != value)
                {
                    _GetSNum = value;
					GDEDataManager.SetInt(_key, GetSNumKey, _GetSNum);
                }
            }
        }

        static string lasttimeKey = "lasttime";
		float _lasttime;
        public float lasttime
        {
            get { return _lasttime; }
            set {
                if (_lasttime != value)
                {
                    _lasttime = value;
					GDEDataManager.SetFloat(_key, lasttimeKey, _lasttime);
                }
            }
        }

        static string NameKey = "Name";
		string _Name;
        public string Name
        {
            get { return _Name; }
            set {
                if (_Name != value)
                {
                    _Name = value;
					GDEDataManager.SetString(_key, NameKey, _Name);
                }
            }
        }

        static string IDKey = "ID";
		string _ID;
        public string ID
        {
            get { return _ID; }
            set {
                if (_ID != value)
                {
                    _ID = value;
					GDEDataManager.SetString(_key, IDKey, _ID);
                }
            }
        }

        static string starttimeKey = "starttime";
		string _starttime;
        public string starttime
        {
            get { return _starttime; }
            set {
                if (_starttime != value)
                {
                    _starttime = value;
					GDEDataManager.SetString(_key, starttimeKey, _starttime);
                }
            }
        }

        static string AllHeroesKey = "AllHeroes";
		public List<string>      AllHeroes;
		public void Set_AllHeroes()
        {
	        GDEDataManager.SetStringList(_key, AllHeroesKey, AllHeroes);
		}
		

        public GDEHeroAltarPoolData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "HeroAltarPool");
			
            dict.Merge(true, NotNormalPool.ToGDEDict(NotNormalPoolKey));
            dict.Merge(true, Unable.ToGDEDict(UnableKey));
            dict.Merge(true, AltarTimes.ToGDEDict(AltarTimesKey));
            dict.Merge(true, PoolCapacity.ToGDEDict(PoolCapacityKey));
            dict.Merge(true, GetSNum.ToGDEDict(GetSNumKey));
            dict.Merge(true, lasttime.ToGDEDict(lasttimeKey));
            dict.Merge(true, Name.ToGDEDict(NameKey));
            dict.Merge(true, ID.ToGDEDict(IDKey));
            dict.Merge(true, starttime.ToGDEDict(starttimeKey));

            dict.Merge(true, AllHeroes.ToGDEDict(AllHeroesKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(NotNormalPoolKey, out _NotNormalPool);
                dict.TryGetBool(UnableKey, out _Unable);
                dict.TryGetInt(AltarTimesKey, out _AltarTimes);
                dict.TryGetInt(PoolCapacityKey, out _PoolCapacity);
                dict.TryGetInt(GetSNumKey, out _GetSNum);
                dict.TryGetFloat(lasttimeKey, out _lasttime);
                dict.TryGetString(NameKey, out _Name);
                dict.TryGetString(IDKey, out _ID);
                dict.TryGetString(starttimeKey, out _starttime);

                dict.TryGetStringList(AllHeroesKey, out AllHeroes);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _NotNormalPool = GDEDataManager.GetBool(_key, NotNormalPoolKey, _NotNormalPool);
            _Unable = GDEDataManager.GetBool(_key, UnableKey, _Unable);
            _AltarTimes = GDEDataManager.GetInt(_key, AltarTimesKey, _AltarTimes);
            _PoolCapacity = GDEDataManager.GetInt(_key, PoolCapacityKey, _PoolCapacity);
            _GetSNum = GDEDataManager.GetInt(_key, GetSNumKey, _GetSNum);
            _lasttime = GDEDataManager.GetFloat(_key, lasttimeKey, _lasttime);
            _Name = GDEDataManager.GetString(_key, NameKey, _Name);
            _ID = GDEDataManager.GetString(_key, IDKey, _ID);
            _starttime = GDEDataManager.GetString(_key, starttimeKey, _starttime);

            AllHeroes = GDEDataManager.GetStringList(_key, AllHeroesKey, AllHeroes);
        }

        public GDEHeroAltarPoolData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEHeroAltarPoolData newClone = new GDEHeroAltarPoolData(newKey);

            newClone.NotNormalPool = NotNormalPool;
            newClone.Unable = Unable;
            newClone.AltarTimes = AltarTimes;
            newClone.PoolCapacity = PoolCapacity;
            newClone.GetSNum = GetSNum;
            newClone.lasttime = lasttime;
            newClone.Name = Name;
            newClone.ID = ID;
            newClone.starttime = starttime;

            newClone.AllHeroes = new List<string>(AllHeroes);
			newClone.Set_AllHeroes();

            return newClone;
		}

        public GDEHeroAltarPoolData DeepClone()
		{
			GDEHeroAltarPoolData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_NotNormalPool()
        {
            GDEDataManager.ResetToDefault(_key, NotNormalPoolKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(NotNormalPoolKey, out _NotNormalPool);
        }

        public void Reset_Unable()
        {
            GDEDataManager.ResetToDefault(_key, UnableKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(UnableKey, out _Unable);
        }

        public void Reset_AltarTimes()
        {
            GDEDataManager.ResetToDefault(_key, AltarTimesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(AltarTimesKey, out _AltarTimes);
        }

        public void Reset_PoolCapacity()
        {
            GDEDataManager.ResetToDefault(_key, PoolCapacityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(PoolCapacityKey, out _PoolCapacity);
        }

        public void Reset_GetSNum()
        {
            GDEDataManager.ResetToDefault(_key, GetSNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(GetSNumKey, out _GetSNum);
        }

        public void Reset_lasttime()
        {
            GDEDataManager.ResetToDefault(_key, lasttimeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(lasttimeKey, out _lasttime);
        }

        public void Reset_Name()
        {
            GDEDataManager.ResetToDefault(_key, NameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(NameKey, out _Name);
        }

        public void Reset_ID()
        {
            GDEDataManager.ResetToDefault(_key, IDKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(IDKey, out _ID);
        }

        public void Reset_starttime()
        {
            GDEDataManager.ResetToDefault(_key, starttimeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(starttimeKey, out _starttime);
        }

        public void Reset_AllHeroes()
        {
	        GDEDataManager.ResetToDefault(_key, AllHeroesKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetStringList(AllHeroesKey, out AllHeroes);
        }
		

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, AllHeroesKey);
            GDEDataManager.ResetToDefault(_key, NameKey);
            GDEDataManager.ResetToDefault(_key, IDKey);
            GDEDataManager.ResetToDefault(_key, AltarTimesKey);
            GDEDataManager.ResetToDefault(_key, PoolCapacityKey);
            GDEDataManager.ResetToDefault(_key, NotNormalPoolKey);
            GDEDataManager.ResetToDefault(_key, GetSNumKey);
            GDEDataManager.ResetToDefault(_key, starttimeKey);
            GDEDataManager.ResetToDefault(_key, lasttimeKey);
            GDEDataManager.ResetToDefault(_key, UnableKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
