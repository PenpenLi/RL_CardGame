// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDERoleAttritubeData : IGDEData
    {
        static string AD_ListKey = "AD_List";
		public List<int>      AD_List;
		public void Set_AD_List()
        {
	        GDEDataManager.SetIntList(_key, AD_ListKey, AD_List);
		}
		
        static string RD_ListKey = "RD_List";
		public List<int>      RD_List;
		public void Set_RD_List()
        {
	        GDEDataManager.SetIntList(_key, RD_ListKey, RD_List);
		}
		

        public GDERoleAttritubeData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "RoleAttritube");
			
            dict.Merge(true, AD_List.ToGDEDict(AD_ListKey));
            dict.Merge(true, RD_List.ToGDEDict(RD_ListKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetIntList(AD_ListKey, out AD_List);
                dict.TryGetIntList(RD_ListKey, out RD_List);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            AD_List = GDEDataManager.GetIntList(_key, AD_ListKey, AD_List);
            RD_List = GDEDataManager.GetIntList(_key, RD_ListKey, RD_List);
        }

        public GDERoleAttritubeData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDERoleAttritubeData newClone = new GDERoleAttritubeData(newKey);

            newClone.AD_List = new List<int>(AD_List);
			newClone.Set_AD_List();
            newClone.RD_List = new List<int>(RD_List);
			newClone.Set_RD_List();

            return newClone;
		}

        public GDERoleAttritubeData DeepClone()
		{
			GDERoleAttritubeData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_AD_List()
        {
	        GDEDataManager.ResetToDefault(_key, AD_ListKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(AD_ListKey, out AD_List);
        }
		
        public void Reset_RD_List()
        {
	        GDEDataManager.ResetToDefault(_key, RD_ListKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(RD_ListKey, out RD_List);
        }
		

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, AD_ListKey);
            GDEDataManager.ResetToDefault(_key, RD_ListKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
