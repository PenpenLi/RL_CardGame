// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEEnemyData : IGDEData
    {
        static string StarNumKey = "StarNum";
		int _StarNum;
        public int StarNum
        {
            get { return _StarNum; }
            set {
                if (_StarNum != value)
                {
                    _StarNum = value;
					GDEDataManager.SetInt(_key, StarNumKey, _StarNum);
                }
            }
        }

        static string criKey = "cri";
		int _cri;
        public int cri
        {
            get { return _cri; }
            set {
                if (_cri != value)
                {
                    _cri = value;
					GDEDataManager.SetInt(_key, criKey, _cri);
                }
            }
        }

        static string criDmgKey = "criDmg";
		int _criDmg;
        public int criDmg
        {
            get { return _criDmg; }
            set {
                if (_criDmg != value)
                {
                    _criDmg = value;
					GDEDataManager.SetInt(_key, criDmgKey, _criDmg);
                }
            }
        }

        static string dmgReductionKey = "dmgReduction";
		int _dmgReduction;
        public int dmgReduction
        {
            get { return _dmgReduction; }
            set {
                if (_dmgReduction != value)
                {
                    _dmgReduction = value;
					GDEDataManager.SetInt(_key, dmgReductionKey, _dmgReduction);
                }
            }
        }

        static string dmgReflectionKey = "dmgReflection";
		int _dmgReflection;
        public int dmgReflection
        {
            get { return _dmgReflection; }
            set {
                if (_dmgReflection != value)
                {
                    _dmgReflection = value;
					GDEDataManager.SetInt(_key, dmgReflectionKey, _dmgReflection);
                }
            }
        }

        static string rewardRateKey = "rewardRate";
		int _rewardRate;
        public int rewardRate
        {
            get { return _rewardRate; }
            set {
                if (_rewardRate != value)
                {
                    _rewardRate = value;
					GDEDataManager.SetInt(_key, rewardRateKey, _rewardRate);
                }
            }
        }

        static string HpRegendPerTurnKey = "HpRegendPerTurn";
		int _HpRegendPerTurn;
        public int HpRegendPerTurn
        {
            get { return _HpRegendPerTurn; }
            set {
                if (_HpRegendPerTurn != value)
                {
                    _HpRegendPerTurn = value;
					GDEDataManager.SetInt(_key, HpRegendPerTurnKey, _HpRegendPerTurn);
                }
            }
        }

        static string MpRegendPerTurnKey = "MpRegendPerTurn";
		int _MpRegendPerTurn;
        public int MpRegendPerTurn
        {
            get { return _MpRegendPerTurn; }
            set {
                if (_MpRegendPerTurn != value)
                {
                    _MpRegendPerTurn = value;
					GDEDataManager.SetInt(_key, MpRegendPerTurnKey, _MpRegendPerTurn);
                }
            }
        }

        static string TpRegendPerTurnKey = "TpRegendPerTurn";
		int _TpRegendPerTurn;
        public int TpRegendPerTurn
        {
            get { return _TpRegendPerTurn; }
            set {
                if (_TpRegendPerTurn != value)
                {
                    _TpRegendPerTurn = value;
					GDEDataManager.SetInt(_key, TpRegendPerTurnKey, _TpRegendPerTurn);
                }
            }
        }

        static string IdKey = "Id";
		int _Id;
        public int Id
        {
            get { return _Id; }
            set {
                if (_Id != value)
                {
                    _Id = value;
					GDEDataManager.SetInt(_key, IdKey, _Id);
                }
            }
        }

        static string nameBeforeIdKey = "nameBeforeId";
		int _nameBeforeId;
        public int nameBeforeId
        {
            get { return _nameBeforeId; }
            set {
                if (_nameBeforeId != value)
                {
                    _nameBeforeId = value;
					GDEDataManager.SetInt(_key, nameBeforeIdKey, _nameBeforeId);
                }
            }
        }

        static string NameKey = "Name";
		string _Name;
        public string Name
        {
            get { return _Name; }
            set {
                if (_Name != value)
                {
                    _Name = value;
					GDEDataManager.SetString(_key, NameKey, _Name);
                }
            }
        }

        static string BasicRAKey = "BasicRA";
		GDERoleAttritubeData _BasicRA;
        public GDERoleAttritubeData BasicRA
        {
            get { return _BasicRA; }
            set {
                if (_BasicRA != value)
                {
                    _BasicRA = value;
					GDEDataManager.SetCustom(_key, BasicRAKey, _BasicRA);
                }
            }
        }
        static string RARateKey = "RARate";
		GDERoleAttritubeData _RARate;
        public GDERoleAttritubeData RARate
        {
            get { return _RARate; }
            set {
                if (_RARate != value)
                {
                    _RARate = value;
					GDEDataManager.SetCustom(_key, RARateKey, _RARate);
                }
            }
        }

        public GDEEnemyData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Enemy");
			
            dict.Merge(true, StarNum.ToGDEDict(StarNumKey));
            dict.Merge(true, cri.ToGDEDict(criKey));
            dict.Merge(true, criDmg.ToGDEDict(criDmgKey));
            dict.Merge(true, dmgReduction.ToGDEDict(dmgReductionKey));
            dict.Merge(true, dmgReflection.ToGDEDict(dmgReflectionKey));
            dict.Merge(true, rewardRate.ToGDEDict(rewardRateKey));
            dict.Merge(true, HpRegendPerTurn.ToGDEDict(HpRegendPerTurnKey));
            dict.Merge(true, MpRegendPerTurn.ToGDEDict(MpRegendPerTurnKey));
            dict.Merge(true, TpRegendPerTurn.ToGDEDict(TpRegendPerTurnKey));
            dict.Merge(true, Id.ToGDEDict(IdKey));
            dict.Merge(true, nameBeforeId.ToGDEDict(nameBeforeIdKey));
            dict.Merge(true, Name.ToGDEDict(NameKey));

            dict.Merge(true, BasicRA.ToGDEDict(BasicRAKey));
            dict.Merge(true, RARate.ToGDEDict(RARateKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(BasicRA, rebuildKeyList);
            BasicRA.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(RARate, rebuildKeyList);
            RARate.UpdateCustomItems(rebuildKeyList);
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(StarNumKey, out _StarNum);
                dict.TryGetInt(criKey, out _cri);
                dict.TryGetInt(criDmgKey, out _criDmg);
                dict.TryGetInt(dmgReductionKey, out _dmgReduction);
                dict.TryGetInt(dmgReflectionKey, out _dmgReflection);
                dict.TryGetInt(rewardRateKey, out _rewardRate);
                dict.TryGetInt(HpRegendPerTurnKey, out _HpRegendPerTurn);
                dict.TryGetInt(MpRegendPerTurnKey, out _MpRegendPerTurn);
                dict.TryGetInt(TpRegendPerTurnKey, out _TpRegendPerTurn);
                dict.TryGetInt(IdKey, out _Id);
                dict.TryGetInt(nameBeforeIdKey, out _nameBeforeId);
                dict.TryGetString(NameKey, out _Name);

                string customDataKey;
                dict.TryGetString(BasicRAKey, out customDataKey);
				_BasicRA = new GDERoleAttritubeData(customDataKey);
                dict.TryGetString(RARateKey, out customDataKey);
				_RARate = new GDERoleAttritubeData(customDataKey);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _StarNum = GDEDataManager.GetInt(_key, StarNumKey, _StarNum);
            _cri = GDEDataManager.GetInt(_key, criKey, _cri);
            _criDmg = GDEDataManager.GetInt(_key, criDmgKey, _criDmg);
            _dmgReduction = GDEDataManager.GetInt(_key, dmgReductionKey, _dmgReduction);
            _dmgReflection = GDEDataManager.GetInt(_key, dmgReflectionKey, _dmgReflection);
            _rewardRate = GDEDataManager.GetInt(_key, rewardRateKey, _rewardRate);
            _HpRegendPerTurn = GDEDataManager.GetInt(_key, HpRegendPerTurnKey, _HpRegendPerTurn);
            _MpRegendPerTurn = GDEDataManager.GetInt(_key, MpRegendPerTurnKey, _MpRegendPerTurn);
            _TpRegendPerTurn = GDEDataManager.GetInt(_key, TpRegendPerTurnKey, _TpRegendPerTurn);
            _Id = GDEDataManager.GetInt(_key, IdKey, _Id);
            _nameBeforeId = GDEDataManager.GetInt(_key, nameBeforeIdKey, _nameBeforeId);
            _Name = GDEDataManager.GetString(_key, NameKey, _Name);

            _BasicRA = GDEDataManager.GetCustom(_key, BasicRAKey, _BasicRA);
            _RARate = GDEDataManager.GetCustom(_key, RARateKey, _RARate);
        }

        public GDEEnemyData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEEnemyData newClone = new GDEEnemyData(newKey);

            newClone.StarNum = StarNum;
            newClone.cri = cri;
            newClone.criDmg = criDmg;
            newClone.dmgReduction = dmgReduction;
            newClone.dmgReflection = dmgReflection;
            newClone.rewardRate = rewardRate;
            newClone.HpRegendPerTurn = HpRegendPerTurn;
            newClone.MpRegendPerTurn = MpRegendPerTurn;
            newClone.TpRegendPerTurn = TpRegendPerTurn;
            newClone.Id = Id;
            newClone.nameBeforeId = nameBeforeId;
            newClone.Name = Name;

            newClone.BasicRA = BasicRA;
            newClone.RARate = RARate;

            return newClone;
		}

        public GDEEnemyData DeepClone()
		{
			GDEEnemyData newClone = ShallowClone();
            newClone.BasicRA = BasicRA.DeepClone();
            newClone.RARate = RARate.DeepClone();
            return newClone;
		}

        public void Reset_StarNum()
        {
            GDEDataManager.ResetToDefault(_key, StarNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(StarNumKey, out _StarNum);
        }

        public void Reset_cri()
        {
            GDEDataManager.ResetToDefault(_key, criKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(criKey, out _cri);
        }

        public void Reset_criDmg()
        {
            GDEDataManager.ResetToDefault(_key, criDmgKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(criDmgKey, out _criDmg);
        }

        public void Reset_dmgReduction()
        {
            GDEDataManager.ResetToDefault(_key, dmgReductionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dmgReductionKey, out _dmgReduction);
        }

        public void Reset_dmgReflection()
        {
            GDEDataManager.ResetToDefault(_key, dmgReflectionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dmgReflectionKey, out _dmgReflection);
        }

        public void Reset_rewardRate()
        {
            GDEDataManager.ResetToDefault(_key, rewardRateKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(rewardRateKey, out _rewardRate);
        }

        public void Reset_HpRegendPerTurn()
        {
            GDEDataManager.ResetToDefault(_key, HpRegendPerTurnKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(HpRegendPerTurnKey, out _HpRegendPerTurn);
        }

        public void Reset_MpRegendPerTurn()
        {
            GDEDataManager.ResetToDefault(_key, MpRegendPerTurnKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(MpRegendPerTurnKey, out _MpRegendPerTurn);
        }

        public void Reset_TpRegendPerTurn()
        {
            GDEDataManager.ResetToDefault(_key, TpRegendPerTurnKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(TpRegendPerTurnKey, out _TpRegendPerTurn);
        }

        public void Reset_Id()
        {
            GDEDataManager.ResetToDefault(_key, IdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(IdKey, out _Id);
        }

        public void Reset_nameBeforeId()
        {
            GDEDataManager.ResetToDefault(_key, nameBeforeIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(nameBeforeIdKey, out _nameBeforeId);
        }

        public void Reset_Name()
        {
            GDEDataManager.ResetToDefault(_key, NameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(NameKey, out _Name);
        }

        public void Reset_BasicRA()
		{
			GDEDataManager.ResetToDefault(_key, BasicRAKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(BasicRAKey, out customDataKey);
			_BasicRA = new GDERoleAttritubeData(customDataKey);

			BasicRA.ResetAll();
		}
        public void Reset_RARate()
		{
			GDEDataManager.ResetToDefault(_key, RARateKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(RARateKey, out customDataKey);
			_RARate = new GDERoleAttritubeData(customDataKey);

			RARate.ResetAll();
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, StarNumKey);
            GDEDataManager.ResetToDefault(_key, BasicRAKey);
            GDEDataManager.ResetToDefault(_key, RARateKey);
            GDEDataManager.ResetToDefault(_key, criKey);
            GDEDataManager.ResetToDefault(_key, criDmgKey);
            GDEDataManager.ResetToDefault(_key, dmgReductionKey);
            GDEDataManager.ResetToDefault(_key, dmgReflectionKey);
            GDEDataManager.ResetToDefault(_key, rewardRateKey);
            GDEDataManager.ResetToDefault(_key, HpRegendPerTurnKey);
            GDEDataManager.ResetToDefault(_key, MpRegendPerTurnKey);
            GDEDataManager.ResetToDefault(_key, TpRegendPerTurnKey);
            GDEDataManager.ResetToDefault(_key, IdKey);
            GDEDataManager.ResetToDefault(_key, NameKey);
            GDEDataManager.ResetToDefault(_key, nameBeforeIdKey);

            Reset_BasicRA();
            Reset_RARate();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
