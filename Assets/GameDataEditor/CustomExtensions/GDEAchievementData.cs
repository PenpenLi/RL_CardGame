// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEAchievementData : IGDEData
    {
        static string loginKey = "login";
		int _login;
        public int login
        {
            get { return _login; }
            set {
                if (_login != value)
                {
                    _login = value;
					GDEDataManager.SetInt(_key, loginKey, _login);
                }
            }
        }

        static string killFodderKey = "killFodder";
		int _killFodder;
        public int killFodder
        {
            get { return _killFodder; }
            set {
                if (_killFodder != value)
                {
                    _killFodder = value;
					GDEDataManager.SetInt(_key, killFodderKey, _killFodder);
                }
            }
        }

        static string killNormalEnemyKey = "killNormalEnemy";
		int _killNormalEnemy;
        public int killNormalEnemy
        {
            get { return _killNormalEnemy; }
            set {
                if (_killNormalEnemy != value)
                {
                    _killNormalEnemy = value;
					GDEDataManager.SetInt(_key, killNormalEnemyKey, _killNormalEnemy);
                }
            }
        }

        static string killBossKey = "killBoss";
		int _killBoss;
        public int killBoss
        {
            get { return _killBoss; }
            set {
                if (_killBoss != value)
                {
                    _killBoss = value;
					GDEDataManager.SetInt(_key, killBossKey, _killBoss);
                }
            }
        }

        static string forgeEquipKey = "forgeEquip";
		int _forgeEquip;
        public int forgeEquip
        {
            get { return _forgeEquip; }
            set {
                if (_forgeEquip != value)
                {
                    _forgeEquip = value;
					GDEDataManager.SetInt(_key, forgeEquipKey, _forgeEquip);
                }
            }
        }

        static string forgePropKey = "forgeProp";
		int _forgeProp;
        public int forgeProp
        {
            get { return _forgeProp; }
            set {
                if (_forgeProp != value)
                {
                    _forgeProp = value;
					GDEDataManager.SetInt(_key, forgePropKey, _forgeProp);
                }
            }
        }

        static string usePropKey = "useProp";
		int _useProp;
        public int useProp
        {
            get { return _useProp; }
            set {
                if (_useProp != value)
                {
                    _useProp = value;
					GDEDataManager.SetInt(_key, usePropKey, _useProp);
                }
            }
        }

        static string ownHeroKey = "ownHero";
		int _ownHero;
        public int ownHero
        {
            get { return _ownHero; }
            set {
                if (_ownHero != value)
                {
                    _ownHero = value;
					GDEDataManager.SetInt(_key, ownHeroKey, _ownHero);
                }
            }
        }

        static string ownHeroFightForceKey = "ownHeroFightForce";
		int _ownHeroFightForce;
        public int ownHeroFightForce
        {
            get { return _ownHeroFightForce; }
            set {
                if (_ownHeroFightForce != value)
                {
                    _ownHeroFightForce = value;
					GDEDataManager.SetInt(_key, ownHeroFightForceKey, _ownHeroFightForce);
                }
            }
        }

        static string ownEquipKey = "ownEquip";
		int _ownEquip;
        public int ownEquip
        {
            get { return _ownEquip; }
            set {
                if (_ownEquip != value)
                {
                    _ownEquip = value;
					GDEDataManager.SetInt(_key, ownEquipKey, _ownEquip);
                }
            }
        }

        static string finishTargetKey = "finishTarget";
		int _finishTarget;
        public int finishTarget
        {
            get { return _finishTarget; }
            set {
                if (_finishTarget != value)
                {
                    _finishTarget = value;
					GDEDataManager.SetInt(_key, finishTargetKey, _finishTarget);
                }
            }
        }

        static string earnCoinKey = "earnCoin";
		int _earnCoin;
        public int earnCoin
        {
            get { return _earnCoin; }
            set {
                if (_earnCoin != value)
                {
                    _earnCoin = value;
					GDEDataManager.SetInt(_key, earnCoinKey, _earnCoin);
                }
            }
        }

        static string consumeCoinKey = "consumeCoin";
		int _consumeCoin;
        public int consumeCoin
        {
            get { return _consumeCoin; }
            set {
                if (_consumeCoin != value)
                {
                    _consumeCoin = value;
					GDEDataManager.SetInt(_key, consumeCoinKey, _consumeCoin);
                }
            }
        }

        static string earnHonorKey = "earnHonor";
		int _earnHonor;
        public int earnHonor
        {
            get { return _earnHonor; }
            set {
                if (_earnHonor != value)
                {
                    _earnHonor = value;
					GDEDataManager.SetInt(_key, earnHonorKey, _earnHonor);
                }
            }
        }

        static string killEliteKey = "killElite";
		int _killElite;
        public int killElite
        {
            get { return _killElite; }
            set {
                if (_killElite != value)
                {
                    _killElite = value;
					GDEDataManager.SetInt(_key, killEliteKey, _killElite);
                }
            }
        }

        static string killGodKey = "killGod";
		int _killGod;
        public int killGod
        {
            get { return _killGod; }
            set {
                if (_killGod != value)
                {
                    _killGod = value;
					GDEDataManager.SetInt(_key, killGodKey, _killGod);
                }
            }
        }

        static string passedNum_levelKey = "passedNum_level";
		int _passedNum_level;
        public int passedNum_level
        {
            get { return _passedNum_level; }
            set {
                if (_passedNum_level != value)
                {
                    _passedNum_level = value;
					GDEDataManager.SetInt(_key, passedNum_levelKey, _passedNum_level);
                }
            }
        }

        static string heroDieKey = "heroDie";
		int _heroDie;
        public int heroDie
        {
            get { return _heroDie; }
            set {
                if (_heroDie != value)
                {
                    _heroDie = value;
					GDEDataManager.SetInt(_key, heroDieKey, _heroDie);
                }
            }
        }

        static string EnemiesGetKey = "EnemiesGet";
		public List<GDEItemData>      EnemiesGet;
		public void Set_EnemiesGet()
        {
	        GDEDataManager.SetCustomList(_key, EnemiesGetKey, EnemiesGet);
		}
		

        public GDEAchievementData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Achievement");
			
            dict.Merge(true, login.ToGDEDict(loginKey));
            dict.Merge(true, killFodder.ToGDEDict(killFodderKey));
            dict.Merge(true, killNormalEnemy.ToGDEDict(killNormalEnemyKey));
            dict.Merge(true, killBoss.ToGDEDict(killBossKey));
            dict.Merge(true, forgeEquip.ToGDEDict(forgeEquipKey));
            dict.Merge(true, forgeProp.ToGDEDict(forgePropKey));
            dict.Merge(true, useProp.ToGDEDict(usePropKey));
            dict.Merge(true, ownHero.ToGDEDict(ownHeroKey));
            dict.Merge(true, ownHeroFightForce.ToGDEDict(ownHeroFightForceKey));
            dict.Merge(true, ownEquip.ToGDEDict(ownEquipKey));
            dict.Merge(true, finishTarget.ToGDEDict(finishTargetKey));
            dict.Merge(true, earnCoin.ToGDEDict(earnCoinKey));
            dict.Merge(true, consumeCoin.ToGDEDict(consumeCoinKey));
            dict.Merge(true, earnHonor.ToGDEDict(earnHonorKey));
            dict.Merge(true, killElite.ToGDEDict(killEliteKey));
            dict.Merge(true, killGod.ToGDEDict(killGodKey));
            dict.Merge(true, passedNum_level.ToGDEDict(passedNum_levelKey));
            dict.Merge(true, heroDie.ToGDEDict(heroDieKey));

            dict.Merge(true, EnemiesGet.ToGDEDict(EnemiesGetKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            if (EnemiesGet != null)
            {
                for(int x=0;  x<EnemiesGet.Count;  x++)
                {
                    GDEDataManager.UpdateItem(EnemiesGet[x], rebuildKeyList);
                    EnemiesGet[x].UpdateCustomItems(rebuildKeyList);
                }
            }
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(loginKey, out _login);
                dict.TryGetInt(killFodderKey, out _killFodder);
                dict.TryGetInt(killNormalEnemyKey, out _killNormalEnemy);
                dict.TryGetInt(killBossKey, out _killBoss);
                dict.TryGetInt(forgeEquipKey, out _forgeEquip);
                dict.TryGetInt(forgePropKey, out _forgeProp);
                dict.TryGetInt(usePropKey, out _useProp);
                dict.TryGetInt(ownHeroKey, out _ownHero);
                dict.TryGetInt(ownHeroFightForceKey, out _ownHeroFightForce);
                dict.TryGetInt(ownEquipKey, out _ownEquip);
                dict.TryGetInt(finishTargetKey, out _finishTarget);
                dict.TryGetInt(earnCoinKey, out _earnCoin);
                dict.TryGetInt(consumeCoinKey, out _consumeCoin);
                dict.TryGetInt(earnHonorKey, out _earnHonor);
                dict.TryGetInt(killEliteKey, out _killElite);
                dict.TryGetInt(killGodKey, out _killGod);
                dict.TryGetInt(passedNum_levelKey, out _passedNum_level);
                dict.TryGetInt(heroDieKey, out _heroDie);

                dict.TryGetCustomList(EnemiesGetKey, out EnemiesGet);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _login = GDEDataManager.GetInt(_key, loginKey, _login);
            _killFodder = GDEDataManager.GetInt(_key, killFodderKey, _killFodder);
            _killNormalEnemy = GDEDataManager.GetInt(_key, killNormalEnemyKey, _killNormalEnemy);
            _killBoss = GDEDataManager.GetInt(_key, killBossKey, _killBoss);
            _forgeEquip = GDEDataManager.GetInt(_key, forgeEquipKey, _forgeEquip);
            _forgeProp = GDEDataManager.GetInt(_key, forgePropKey, _forgeProp);
            _useProp = GDEDataManager.GetInt(_key, usePropKey, _useProp);
            _ownHero = GDEDataManager.GetInt(_key, ownHeroKey, _ownHero);
            _ownHeroFightForce = GDEDataManager.GetInt(_key, ownHeroFightForceKey, _ownHeroFightForce);
            _ownEquip = GDEDataManager.GetInt(_key, ownEquipKey, _ownEquip);
            _finishTarget = GDEDataManager.GetInt(_key, finishTargetKey, _finishTarget);
            _earnCoin = GDEDataManager.GetInt(_key, earnCoinKey, _earnCoin);
            _consumeCoin = GDEDataManager.GetInt(_key, consumeCoinKey, _consumeCoin);
            _earnHonor = GDEDataManager.GetInt(_key, earnHonorKey, _earnHonor);
            _killElite = GDEDataManager.GetInt(_key, killEliteKey, _killElite);
            _killGod = GDEDataManager.GetInt(_key, killGodKey, _killGod);
            _passedNum_level = GDEDataManager.GetInt(_key, passedNum_levelKey, _passedNum_level);
            _heroDie = GDEDataManager.GetInt(_key, heroDieKey, _heroDie);

            EnemiesGet = GDEDataManager.GetCustomList(_key, EnemiesGetKey, EnemiesGet);
        }

        public GDEAchievementData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEAchievementData newClone = new GDEAchievementData(newKey);

            newClone.login = login;
            newClone.killFodder = killFodder;
            newClone.killNormalEnemy = killNormalEnemy;
            newClone.killBoss = killBoss;
            newClone.forgeEquip = forgeEquip;
            newClone.forgeProp = forgeProp;
            newClone.useProp = useProp;
            newClone.ownHero = ownHero;
            newClone.ownHeroFightForce = ownHeroFightForce;
            newClone.ownEquip = ownEquip;
            newClone.finishTarget = finishTarget;
            newClone.earnCoin = earnCoin;
            newClone.consumeCoin = consumeCoin;
            newClone.earnHonor = earnHonor;
            newClone.killElite = killElite;
            newClone.killGod = killGod;
            newClone.passedNum_level = passedNum_level;
            newClone.heroDie = heroDie;

            newClone.EnemiesGet = new List<GDEItemData>(EnemiesGet);
			newClone.Set_EnemiesGet();

            return newClone;
		}

        public GDEAchievementData DeepClone()
		{
			GDEAchievementData newClone = ShallowClone();
            newClone.EnemiesGet = new List<GDEItemData>();
			if (EnemiesGet != null)
			{
				foreach(var val in EnemiesGet)
					newClone.EnemiesGet.Add(val.DeepClone());
			}
			newClone.Set_EnemiesGet();
            return newClone;
		}

        public void Reset_login()
        {
            GDEDataManager.ResetToDefault(_key, loginKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(loginKey, out _login);
        }

        public void Reset_killFodder()
        {
            GDEDataManager.ResetToDefault(_key, killFodderKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(killFodderKey, out _killFodder);
        }

        public void Reset_killNormalEnemy()
        {
            GDEDataManager.ResetToDefault(_key, killNormalEnemyKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(killNormalEnemyKey, out _killNormalEnemy);
        }

        public void Reset_killBoss()
        {
            GDEDataManager.ResetToDefault(_key, killBossKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(killBossKey, out _killBoss);
        }

        public void Reset_forgeEquip()
        {
            GDEDataManager.ResetToDefault(_key, forgeEquipKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(forgeEquipKey, out _forgeEquip);
        }

        public void Reset_forgeProp()
        {
            GDEDataManager.ResetToDefault(_key, forgePropKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(forgePropKey, out _forgeProp);
        }

        public void Reset_useProp()
        {
            GDEDataManager.ResetToDefault(_key, usePropKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(usePropKey, out _useProp);
        }

        public void Reset_ownHero()
        {
            GDEDataManager.ResetToDefault(_key, ownHeroKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(ownHeroKey, out _ownHero);
        }

        public void Reset_ownHeroFightForce()
        {
            GDEDataManager.ResetToDefault(_key, ownHeroFightForceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(ownHeroFightForceKey, out _ownHeroFightForce);
        }

        public void Reset_ownEquip()
        {
            GDEDataManager.ResetToDefault(_key, ownEquipKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(ownEquipKey, out _ownEquip);
        }

        public void Reset_finishTarget()
        {
            GDEDataManager.ResetToDefault(_key, finishTargetKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(finishTargetKey, out _finishTarget);
        }

        public void Reset_earnCoin()
        {
            GDEDataManager.ResetToDefault(_key, earnCoinKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(earnCoinKey, out _earnCoin);
        }

        public void Reset_consumeCoin()
        {
            GDEDataManager.ResetToDefault(_key, consumeCoinKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(consumeCoinKey, out _consumeCoin);
        }

        public void Reset_earnHonor()
        {
            GDEDataManager.ResetToDefault(_key, earnHonorKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(earnHonorKey, out _earnHonor);
        }

        public void Reset_killElite()
        {
            GDEDataManager.ResetToDefault(_key, killEliteKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(killEliteKey, out _killElite);
        }

        public void Reset_killGod()
        {
            GDEDataManager.ResetToDefault(_key, killGodKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(killGodKey, out _killGod);
        }

        public void Reset_passedNum_level()
        {
            GDEDataManager.ResetToDefault(_key, passedNum_levelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(passedNum_levelKey, out _passedNum_level);
        }

        public void Reset_heroDie()
        {
            GDEDataManager.ResetToDefault(_key, heroDieKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(heroDieKey, out _heroDie);
        }

        public void Reset_EnemiesGet()
		{
			GDEDataManager.ResetToDefault(_key, EnemiesGetKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(EnemiesGetKey, out EnemiesGet);
			EnemiesGet = GDEDataManager.GetCustomList(_key, EnemiesGetKey, EnemiesGet);

			EnemiesGet.ForEach(x => x.ResetAll());
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, loginKey);
            GDEDataManager.ResetToDefault(_key, killBossKey);
            GDEDataManager.ResetToDefault(_key, forgeEquipKey);
            GDEDataManager.ResetToDefault(_key, forgePropKey);
            GDEDataManager.ResetToDefault(_key, usePropKey);
            GDEDataManager.ResetToDefault(_key, ownHeroKey);
            GDEDataManager.ResetToDefault(_key, ownHeroFightForceKey);
            GDEDataManager.ResetToDefault(_key, ownEquipKey);
            GDEDataManager.ResetToDefault(_key, finishTargetKey);
            GDEDataManager.ResetToDefault(_key, earnCoinKey);
            GDEDataManager.ResetToDefault(_key, consumeCoinKey);
            GDEDataManager.ResetToDefault(_key, earnHonorKey);
            GDEDataManager.ResetToDefault(_key, killEliteKey);
            GDEDataManager.ResetToDefault(_key, killGodKey);
            GDEDataManager.ResetToDefault(_key, passedNum_levelKey);
            GDEDataManager.ResetToDefault(_key, killNormalEnemyKey);
            GDEDataManager.ResetToDefault(_key, killFodderKey);
            GDEDataManager.ResetToDefault(_key, heroDieKey);
            GDEDataManager.ResetToDefault(_key, EnemiesGetKey);

            Reset_EnemiesGet();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
