// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEtimeTaskData : IGDEData
    {
        static string keepWorkingKey = "keepWorking";
		bool _keepWorking;
        public bool keepWorking
        {
            get { return _keepWorking; }
            set {
                if (_keepWorking != value)
                {
                    _keepWorking = value;
					GDEDataManager.SetBool(_key, keepWorkingKey, _keepWorking);
                }
            }
        }

        static string isEmptyKey = "isEmpty";
		bool _isEmpty;
        public bool isEmpty
        {
            get { return _isEmpty; }
            set {
                if (_isEmpty != value)
                {
                    _isEmpty = value;
					GDEDataManager.SetBool(_key, isEmptyKey, _isEmpty);
                }
            }
        }

        static string timeTypeKey = "timeType";
		int _timeType;
        public int timeType
        {
            get { return _timeType; }
            set {
                if (_timeType != value)
                {
                    _timeType = value;
					GDEDataManager.SetInt(_key, timeTypeKey, _timeType);
                }
            }
        }

        static string oldDataKey = "oldData";
		int _oldData;
        public int oldData
        {
            get { return _oldData; }
            set {
                if (_oldData != value)
                {
                    _oldData = value;
					GDEDataManager.SetInt(_key, oldDataKey, _oldData);
                }
            }
        }

        static string newDataKey = "newData";
		int _newData;
        public int newData
        {
            get { return _newData; }
            set {
                if (_newData != value)
                {
                    _newData = value;
					GDEDataManager.SetInt(_key, newDataKey, _newData);
                }
            }
        }

        static string itemHashcodeKey = "itemHashcode";
		int _itemHashcode;
        public int itemHashcode
        {
            get { return _itemHashcode; }
            set {
                if (_itemHashcode != value)
                {
                    _itemHashcode = value;
					GDEDataManager.SetInt(_key, itemHashcodeKey, _itemHashcode);
                }
            }
        }

        static string itemIdKey = "itemId";
		string _itemId;
        public string itemId
        {
            get { return _itemId; }
            set {
                if (_itemId != value)
                {
                    _itemId = value;
					GDEDataManager.SetString(_key, itemIdKey, _itemId);
                }
            }
        }

        static string startTimeKey = "startTime";
		string _startTime;
        public string startTime
        {
            get { return _startTime; }
            set {
                if (_startTime != value)
                {
                    _startTime = value;
					GDEDataManager.SetString(_key, startTimeKey, _startTime);
                }
            }
        }

        static string taskIdKey = "taskId";
		string _taskId;
        public string taskId
        {
            get { return _taskId; }
            set {
                if (_taskId != value)
                {
                    _taskId = value;
					GDEDataManager.SetString(_key, taskIdKey, _taskId);
                }
            }
        }

        static string taskRewardsKey = "taskRewards";
		public List<string>      taskRewards;
		public void Set_taskRewards()
        {
	        GDEDataManager.SetStringList(_key, taskRewardsKey, taskRewards);
		}
		

        public GDEtimeTaskData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "timeTask");
			
            dict.Merge(true, keepWorking.ToGDEDict(keepWorkingKey));
            dict.Merge(true, isEmpty.ToGDEDict(isEmptyKey));
            dict.Merge(true, timeType.ToGDEDict(timeTypeKey));
            dict.Merge(true, oldData.ToGDEDict(oldDataKey));
            dict.Merge(true, newData.ToGDEDict(newDataKey));
            dict.Merge(true, itemHashcode.ToGDEDict(itemHashcodeKey));
            dict.Merge(true, itemId.ToGDEDict(itemIdKey));
            dict.Merge(true, startTime.ToGDEDict(startTimeKey));
            dict.Merge(true, taskId.ToGDEDict(taskIdKey));

            dict.Merge(true, taskRewards.ToGDEDict(taskRewardsKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(keepWorkingKey, out _keepWorking);
                dict.TryGetBool(isEmptyKey, out _isEmpty);
                dict.TryGetInt(timeTypeKey, out _timeType);
                dict.TryGetInt(oldDataKey, out _oldData);
                dict.TryGetInt(newDataKey, out _newData);
                dict.TryGetInt(itemHashcodeKey, out _itemHashcode);
                dict.TryGetString(itemIdKey, out _itemId);
                dict.TryGetString(startTimeKey, out _startTime);
                dict.TryGetString(taskIdKey, out _taskId);

                dict.TryGetStringList(taskRewardsKey, out taskRewards);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _keepWorking = GDEDataManager.GetBool(_key, keepWorkingKey, _keepWorking);
            _isEmpty = GDEDataManager.GetBool(_key, isEmptyKey, _isEmpty);
            _timeType = GDEDataManager.GetInt(_key, timeTypeKey, _timeType);
            _oldData = GDEDataManager.GetInt(_key, oldDataKey, _oldData);
            _newData = GDEDataManager.GetInt(_key, newDataKey, _newData);
            _itemHashcode = GDEDataManager.GetInt(_key, itemHashcodeKey, _itemHashcode);
            _itemId = GDEDataManager.GetString(_key, itemIdKey, _itemId);
            _startTime = GDEDataManager.GetString(_key, startTimeKey, _startTime);
            _taskId = GDEDataManager.GetString(_key, taskIdKey, _taskId);

            taskRewards = GDEDataManager.GetStringList(_key, taskRewardsKey, taskRewards);
        }

        public GDEtimeTaskData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEtimeTaskData newClone = new GDEtimeTaskData(newKey);

            newClone.keepWorking = keepWorking;
            newClone.isEmpty = isEmpty;
            newClone.timeType = timeType;
            newClone.oldData = oldData;
            newClone.newData = newData;
            newClone.itemHashcode = itemHashcode;
            newClone.itemId = itemId;
            newClone.startTime = startTime;
            newClone.taskId = taskId;

            newClone.taskRewards = new List<string>(taskRewards);
			newClone.Set_taskRewards();

            return newClone;
		}

        public GDEtimeTaskData DeepClone()
		{
			GDEtimeTaskData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_keepWorking()
        {
            GDEDataManager.ResetToDefault(_key, keepWorkingKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(keepWorkingKey, out _keepWorking);
        }

        public void Reset_isEmpty()
        {
            GDEDataManager.ResetToDefault(_key, isEmptyKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isEmptyKey, out _isEmpty);
        }

        public void Reset_timeType()
        {
            GDEDataManager.ResetToDefault(_key, timeTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(timeTypeKey, out _timeType);
        }

        public void Reset_oldData()
        {
            GDEDataManager.ResetToDefault(_key, oldDataKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(oldDataKey, out _oldData);
        }

        public void Reset_newData()
        {
            GDEDataManager.ResetToDefault(_key, newDataKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(newDataKey, out _newData);
        }

        public void Reset_itemHashcode()
        {
            GDEDataManager.ResetToDefault(_key, itemHashcodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(itemHashcodeKey, out _itemHashcode);
        }

        public void Reset_itemId()
        {
            GDEDataManager.ResetToDefault(_key, itemIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(itemIdKey, out _itemId);
        }

        public void Reset_startTime()
        {
            GDEDataManager.ResetToDefault(_key, startTimeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(startTimeKey, out _startTime);
        }

        public void Reset_taskId()
        {
            GDEDataManager.ResetToDefault(_key, taskIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(taskIdKey, out _taskId);
        }

        public void Reset_taskRewards()
        {
	        GDEDataManager.ResetToDefault(_key, taskRewardsKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetStringList(taskRewardsKey, out taskRewards);
        }
		

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, startTimeKey);
            GDEDataManager.ResetToDefault(_key, timeTypeKey);
            GDEDataManager.ResetToDefault(_key, taskIdKey);
            GDEDataManager.ResetToDefault(_key, oldDataKey);
            GDEDataManager.ResetToDefault(_key, newDataKey);
            GDEDataManager.ResetToDefault(_key, itemIdKey);
            GDEDataManager.ResetToDefault(_key, keepWorkingKey);
            GDEDataManager.ResetToDefault(_key, isEmptyKey);
            GDEDataManager.ResetToDefault(_key, taskRewardsKey);
            GDEDataManager.ResetToDefault(_key, itemHashcodeKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
