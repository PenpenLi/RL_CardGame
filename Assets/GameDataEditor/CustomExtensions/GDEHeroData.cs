// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEHeroData : IGDEData
    {
        static string lockedKey = "locked";
		bool _locked;
        public bool locked
        {
            get { return _locked; }
            set {
                if (_locked != value)
                {
                    _locked = value;
					GDEDataManager.SetBool(_key, lockedKey, _locked);
                }
            }
        }

        static string lvKey = "lv";
		int _lv;
        public int lv
        {
            get { return _lv; }
            set {
                if (_lv != value)
                {
                    _lv = value;
					GDEDataManager.SetInt(_key, lvKey, _lv);
                }
            }
        }

        static string statusKey = "status";
		int _status;
        public int status
        {
            get { return _status; }
            set {
                if (_status != value)
                {
                    _status = value;
					GDEDataManager.SetInt(_key, statusKey, _status);
                }
            }
        }

        static string hashCodeKey = "hashCode";
		int _hashCode;
        public int hashCode
        {
            get { return _hashCode; }
            set {
                if (_hashCode != value)
                {
                    _hashCode = value;
					GDEDataManager.SetInt(_key, hashCodeKey, _hashCode);
                }
            }
        }

        static string battleForceKey = "battleForce";
		int _battleForce;
        public int battleForce
        {
            get { return _battleForce; }
            set {
                if (_battleForce != value)
                {
                    _battleForce = value;
					GDEDataManager.SetInt(_key, battleForceKey, _battleForce);
                }
            }
        }

        static string hpPropAddKey = "hpPropAdd";
		int _hpPropAdd;
        public int hpPropAdd
        {
            get { return _hpPropAdd; }
            set {
                if (_hpPropAdd != value)
                {
                    _hpPropAdd = value;
					GDEDataManager.SetInt(_key, hpPropAddKey, _hpPropAdd);
                }
            }
        }

        static string expKey = "exp";
		int _exp;
        public int exp
        {
            get { return _exp; }
            set {
                if (_exp != value)
                {
                    _exp = value;
					GDEDataManager.SetInt(_key, expKey, _exp);
                }
            }
        }

        static string mpPropAddKey = "mpPropAdd";
		int _mpPropAdd;
        public int mpPropAdd
        {
            get { return _mpPropAdd; }
            set {
                if (_mpPropAdd != value)
                {
                    _mpPropAdd = value;
					GDEDataManager.SetInt(_key, mpPropAddKey, _mpPropAdd);
                }
            }
        }

        static string tpPropAddKey = "tpPropAdd";
		int _tpPropAdd;
        public int tpPropAdd
        {
            get { return _tpPropAdd; }
            set {
                if (_tpPropAdd != value)
                {
                    _tpPropAdd = value;
					GDEDataManager.SetInt(_key, tpPropAddKey, _tpPropAdd);
                }
            }
        }

        static string starNumUpgradeTimesKey = "starNumUpgradeTimes";
		int _starNumUpgradeTimes;
        public int starNumUpgradeTimes
        {
            get { return _starNumUpgradeTimes; }
            set {
                if (_starNumUpgradeTimes != value)
                {
                    _starNumUpgradeTimes = value;
					GDEDataManager.SetInt(_key, starNumUpgradeTimesKey, _starNumUpgradeTimes);
                }
            }
        }

        static string indexKey = "index";
		int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
					GDEDataManager.SetInt(_key, indexKey, _index);
                }
            }
        }

        static string wakeNumKey = "wakeNum";
		int _wakeNum;
        public int wakeNum
        {
            get { return _wakeNum; }
            set {
                if (_wakeNum != value)
                {
                    _wakeNum = value;
					GDEDataManager.SetInt(_key, wakeNumKey, _wakeNum);
                }
            }
        }

        static string nameBeforeIdKey = "nameBeforeId";
		int _nameBeforeId;
        public int nameBeforeId
        {
            get { return _nameBeforeId; }
            set {
                if (_nameBeforeId != value)
                {
                    _nameBeforeId = value;
					GDEDataManager.SetInt(_key, nameBeforeIdKey, _nameBeforeId);
                }
            }
        }

        static string LikabilityKey = "Likability";
		int _Likability;
        public int Likability
        {
            get { return _Likability; }
            set {
                if (_Likability != value)
                {
                    _Likability = value;
					GDEDataManager.SetInt(_key, LikabilityKey, _Likability);
                }
            }
        }

        static string teamPosKey = "teamPos";
		int _teamPos;
        public int teamPos
        {
            get { return _teamPos; }
            set {
                if (_teamPos != value)
                {
                    _teamPos = value;
					GDEDataManager.SetInt(_key, teamPosKey, _teamPos);
                }
            }
        }

        static string likabilityKey = "likability";
		int _likability;
        public int likability
        {
            get { return _likability; }
            set {
                if (_likability != value)
                {
                    _likability = value;
					GDEDataManager.SetInt(_key, likabilityKey, _likability);
                }
            }
        }

        static string FatigueKey = "Fatigue";
		int _Fatigue;
        public int Fatigue
        {
            get { return _Fatigue; }
            set {
                if (_Fatigue != value)
                {
                    _Fatigue = value;
					GDEDataManager.SetInt(_key, FatigueKey, _Fatigue);
                }
            }
        }

        static string TeamOrderKey = "TeamOrder";
		int _TeamOrder;
        public int TeamOrder
        {
            get { return _TeamOrder; }
            set {
                if (_TeamOrder != value)
                {
                    _TeamOrder = value;
					GDEDataManager.SetInt(_key, TeamOrderKey, _TeamOrder);
                }
            }
        }

        static string raceKey = "race";
		int _race;
        public int race
        {
            get { return _race; }
            set {
                if (_race != value)
                {
                    _race = value;
					GDEDataManager.SetInt(_key, raceKey, _race);
                }
            }
        }

        static string skillLevelKey = "skillLevel";
		int _skillLevel;
        public int skillLevel
        {
            get { return _skillLevel; }
            set {
                if (_skillLevel != value)
                {
                    _skillLevel = value;
					GDEDataManager.SetInt(_key, skillLevelKey, _skillLevel);
                }
            }
        }

        static string teamIdBelongToKey = "teamIdBelongTo";
		string _teamIdBelongTo;
        public string teamIdBelongTo
        {
            get { return _teamIdBelongTo; }
            set {
                if (_teamIdBelongTo != value)
                {
                    _teamIdBelongTo = value;
					GDEDataManager.SetString(_key, teamIdBelongToKey, _teamIdBelongTo);
                }
            }
        }

        static string skillOmegaIdKey = "skillOmegaId";
		string _skillOmegaId;
        public string skillOmegaId
        {
            get { return _skillOmegaId; }
            set {
                if (_skillOmegaId != value)
                {
                    _skillOmegaId = value;
					GDEDataManager.SetString(_key, skillOmegaIdKey, _skillOmegaId);
                }
            }
        }

        static string skill0IdKey = "skill0Id";
		string _skill0Id;
        public string skill0Id
        {
            get { return _skill0Id; }
            set {
                if (_skill0Id != value)
                {
                    _skill0Id = value;
					GDEDataManager.SetString(_key, skill0IdKey, _skill0Id);
                }
            }
        }

        static string skill1IdKey = "skill1Id";
		string _skill1Id;
        public string skill1Id
        {
            get { return _skill1Id; }
            set {
                if (_skill1Id != value)
                {
                    _skill1Id = value;
					GDEDataManager.SetString(_key, skill1IdKey, _skill1Id);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        static string equipHelmetKey = "equipHelmet";
		GDEEquipmentData _equipHelmet;
        public GDEEquipmentData equipHelmet
        {
            get { return _equipHelmet; }
            set {
                if (_equipHelmet != value)
                {
                    _equipHelmet = value;
					GDEDataManager.SetCustom(_key, equipHelmetKey, _equipHelmet);
                }
            }
        }
        static string equipBreastplateKey = "equipBreastplate";
		GDEEquipmentData _equipBreastplate;
        public GDEEquipmentData equipBreastplate
        {
            get { return _equipBreastplate; }
            set {
                if (_equipBreastplate != value)
                {
                    _equipBreastplate = value;
					GDEDataManager.SetCustom(_key, equipBreastplateKey, _equipBreastplate);
                }
            }
        }
        static string equipGardebrasKey = "equipGardebras";
		GDEEquipmentData _equipGardebras;
        public GDEEquipmentData equipGardebras
        {
            get { return _equipGardebras; }
            set {
                if (_equipGardebras != value)
                {
                    _equipGardebras = value;
					GDEDataManager.SetCustom(_key, equipGardebrasKey, _equipGardebras);
                }
            }
        }
        static string equipLeggingKey = "equipLegging";
		GDEEquipmentData _equipLegging;
        public GDEEquipmentData equipLegging
        {
            get { return _equipLegging; }
            set {
                if (_equipLegging != value)
                {
                    _equipLegging = value;
					GDEDataManager.SetCustom(_key, equipLeggingKey, _equipLegging);
                }
            }
        }
        static string jewelry0Key = "jewelry0";
		GDEEquipmentData _jewelry0;
        public GDEEquipmentData jewelry0
        {
            get { return _jewelry0; }
            set {
                if (_jewelry0 != value)
                {
                    _jewelry0 = value;
					GDEDataManager.SetCustom(_key, jewelry0Key, _jewelry0);
                }
            }
        }
        static string jewelry1Key = "jewelry1";
		GDEEquipmentData _jewelry1;
        public GDEEquipmentData jewelry1
        {
            get { return _jewelry1; }
            set {
                if (_jewelry1 != value)
                {
                    _jewelry1 = value;
					GDEDataManager.SetCustom(_key, jewelry1Key, _jewelry1);
                }
            }
        }
        static string RoleAttritubeListKey = "RoleAttritubeList";
		GDERoleAttritubeData _RoleAttritubeList;
        public GDERoleAttritubeData RoleAttritubeList
        {
            get { return _RoleAttritubeList; }
            set {
                if (_RoleAttritubeList != value)
                {
                    _RoleAttritubeList = value;
					GDEDataManager.SetCustom(_key, RoleAttritubeListKey, _RoleAttritubeList);
                }
            }
        }
        static string equipWeaponKey = "equipWeapon";
		GDEEquipmentData _equipWeapon;
        public GDEEquipmentData equipWeapon
        {
            get { return _equipWeapon; }
            set {
                if (_equipWeapon != value)
                {
                    _equipWeapon = value;
					GDEDataManager.SetCustom(_key, equipWeaponKey, _equipWeapon);
                }
            }
        }
        static string ItemInfoKey = "ItemInfo";
		GDEItemData _ItemInfo;
        public GDEItemData ItemInfo
        {
            get { return _ItemInfo; }
            set {
                if (_ItemInfo != value)
                {
                    _ItemInfo = value;
					GDEDataManager.SetCustom(_key, ItemInfoKey, _ItemInfo);
                }
            }
        }
        static string AnimDataKey = "AnimData";
		GDEAnimData _AnimData;
        public GDEAnimData AnimData
        {
            get { return _AnimData; }
            set {
                if (_AnimData != value)
                {
                    _AnimData = value;
					GDEDataManager.SetCustom(_key, AnimDataKey, _AnimData);
                }
            }
        }

        static string skillsOwnedKey = "skillsOwned";
		public List<GDEASkillData>      skillsOwned;
		public void Set_skillsOwned()
        {
	        GDEDataManager.SetCustomList(_key, skillsOwnedKey, skillsOwned);
		}
		

        public GDEHeroData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Hero");
			
            dict.Merge(true, locked.ToGDEDict(lockedKey));
            dict.Merge(true, lv.ToGDEDict(lvKey));
            dict.Merge(true, status.ToGDEDict(statusKey));
            dict.Merge(true, hashCode.ToGDEDict(hashCodeKey));
            dict.Merge(true, battleForce.ToGDEDict(battleForceKey));
            dict.Merge(true, hpPropAdd.ToGDEDict(hpPropAddKey));
            dict.Merge(true, exp.ToGDEDict(expKey));
            dict.Merge(true, mpPropAdd.ToGDEDict(mpPropAddKey));
            dict.Merge(true, tpPropAdd.ToGDEDict(tpPropAddKey));
            dict.Merge(true, starNumUpgradeTimes.ToGDEDict(starNumUpgradeTimesKey));
            dict.Merge(true, index.ToGDEDict(indexKey));
            dict.Merge(true, wakeNum.ToGDEDict(wakeNumKey));
            dict.Merge(true, nameBeforeId.ToGDEDict(nameBeforeIdKey));
            dict.Merge(true, Likability.ToGDEDict(LikabilityKey));
            dict.Merge(true, teamPos.ToGDEDict(teamPosKey));
            dict.Merge(true, likability.ToGDEDict(likabilityKey));
            dict.Merge(true, Fatigue.ToGDEDict(FatigueKey));
            dict.Merge(true, TeamOrder.ToGDEDict(TeamOrderKey));
            dict.Merge(true, race.ToGDEDict(raceKey));
            dict.Merge(true, skillLevel.ToGDEDict(skillLevelKey));
            dict.Merge(true, teamIdBelongTo.ToGDEDict(teamIdBelongToKey));
            dict.Merge(true, skillOmegaId.ToGDEDict(skillOmegaIdKey));
            dict.Merge(true, skill0Id.ToGDEDict(skill0IdKey));
            dict.Merge(true, skill1Id.ToGDEDict(skill1IdKey));
            dict.Merge(true, id.ToGDEDict(idKey));

            dict.Merge(true, equipHelmet.ToGDEDict(equipHelmetKey));
            dict.Merge(true, equipBreastplate.ToGDEDict(equipBreastplateKey));
            dict.Merge(true, equipGardebras.ToGDEDict(equipGardebrasKey));
            dict.Merge(true, equipLegging.ToGDEDict(equipLeggingKey));
            dict.Merge(true, jewelry0.ToGDEDict(jewelry0Key));
            dict.Merge(true, jewelry1.ToGDEDict(jewelry1Key));
            dict.Merge(true, RoleAttritubeList.ToGDEDict(RoleAttritubeListKey));
            dict.Merge(true, equipWeapon.ToGDEDict(equipWeaponKey));
            dict.Merge(true, ItemInfo.ToGDEDict(ItemInfoKey));
            dict.Merge(true, AnimData.ToGDEDict(AnimDataKey));
            dict.Merge(true, skillsOwned.ToGDEDict(skillsOwnedKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(equipHelmet, rebuildKeyList);
            equipHelmet.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(equipBreastplate, rebuildKeyList);
            equipBreastplate.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(equipGardebras, rebuildKeyList);
            equipGardebras.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(equipLegging, rebuildKeyList);
            equipLegging.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(jewelry0, rebuildKeyList);
            jewelry0.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(jewelry1, rebuildKeyList);
            jewelry1.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(RoleAttritubeList, rebuildKeyList);
            RoleAttritubeList.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(equipWeapon, rebuildKeyList);
            equipWeapon.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(ItemInfo, rebuildKeyList);
            ItemInfo.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(AnimData, rebuildKeyList);
            AnimData.UpdateCustomItems(rebuildKeyList);
            if (skillsOwned != null)
            {
                for(int x=0;  x<skillsOwned.Count;  x++)
                {
                    GDEDataManager.UpdateItem(skillsOwned[x], rebuildKeyList);
                    skillsOwned[x].UpdateCustomItems(rebuildKeyList);
                }
            }
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(lockedKey, out _locked);
                dict.TryGetInt(lvKey, out _lv);
                dict.TryGetInt(statusKey, out _status);
                dict.TryGetInt(hashCodeKey, out _hashCode);
                dict.TryGetInt(battleForceKey, out _battleForce);
                dict.TryGetInt(hpPropAddKey, out _hpPropAdd);
                dict.TryGetInt(expKey, out _exp);
                dict.TryGetInt(mpPropAddKey, out _mpPropAdd);
                dict.TryGetInt(tpPropAddKey, out _tpPropAdd);
                dict.TryGetInt(starNumUpgradeTimesKey, out _starNumUpgradeTimes);
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetInt(wakeNumKey, out _wakeNum);
                dict.TryGetInt(nameBeforeIdKey, out _nameBeforeId);
                dict.TryGetInt(LikabilityKey, out _Likability);
                dict.TryGetInt(teamPosKey, out _teamPos);
                dict.TryGetInt(likabilityKey, out _likability);
                dict.TryGetInt(FatigueKey, out _Fatigue);
                dict.TryGetInt(TeamOrderKey, out _TeamOrder);
                dict.TryGetInt(raceKey, out _race);
                dict.TryGetInt(skillLevelKey, out _skillLevel);
                dict.TryGetString(teamIdBelongToKey, out _teamIdBelongTo);
                dict.TryGetString(skillOmegaIdKey, out _skillOmegaId);
                dict.TryGetString(skill0IdKey, out _skill0Id);
                dict.TryGetString(skill1IdKey, out _skill1Id);
                dict.TryGetString(idKey, out _id);

                string customDataKey;
                dict.TryGetString(equipHelmetKey, out customDataKey);
				_equipHelmet = new GDEEquipmentData(customDataKey);
                dict.TryGetString(equipBreastplateKey, out customDataKey);
				_equipBreastplate = new GDEEquipmentData(customDataKey);
                dict.TryGetString(equipGardebrasKey, out customDataKey);
				_equipGardebras = new GDEEquipmentData(customDataKey);
                dict.TryGetString(equipLeggingKey, out customDataKey);
				_equipLegging = new GDEEquipmentData(customDataKey);
                dict.TryGetString(jewelry0Key, out customDataKey);
				_jewelry0 = new GDEEquipmentData(customDataKey);
                dict.TryGetString(jewelry1Key, out customDataKey);
				_jewelry1 = new GDEEquipmentData(customDataKey);
                dict.TryGetString(RoleAttritubeListKey, out customDataKey);
				_RoleAttritubeList = new GDERoleAttritubeData(customDataKey);
                dict.TryGetString(equipWeaponKey, out customDataKey);
				_equipWeapon = new GDEEquipmentData(customDataKey);
                dict.TryGetString(ItemInfoKey, out customDataKey);
				_ItemInfo = new GDEItemData(customDataKey);
                dict.TryGetString(AnimDataKey, out customDataKey);
				_AnimData = new GDEAnimData(customDataKey);

                dict.TryGetCustomList(skillsOwnedKey, out skillsOwned);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _locked = GDEDataManager.GetBool(_key, lockedKey, _locked);
            _lv = GDEDataManager.GetInt(_key, lvKey, _lv);
            _status = GDEDataManager.GetInt(_key, statusKey, _status);
            _hashCode = GDEDataManager.GetInt(_key, hashCodeKey, _hashCode);
            _battleForce = GDEDataManager.GetInt(_key, battleForceKey, _battleForce);
            _hpPropAdd = GDEDataManager.GetInt(_key, hpPropAddKey, _hpPropAdd);
            _exp = GDEDataManager.GetInt(_key, expKey, _exp);
            _mpPropAdd = GDEDataManager.GetInt(_key, mpPropAddKey, _mpPropAdd);
            _tpPropAdd = GDEDataManager.GetInt(_key, tpPropAddKey, _tpPropAdd);
            _starNumUpgradeTimes = GDEDataManager.GetInt(_key, starNumUpgradeTimesKey, _starNumUpgradeTimes);
            _index = GDEDataManager.GetInt(_key, indexKey, _index);
            _wakeNum = GDEDataManager.GetInt(_key, wakeNumKey, _wakeNum);
            _nameBeforeId = GDEDataManager.GetInt(_key, nameBeforeIdKey, _nameBeforeId);
            _Likability = GDEDataManager.GetInt(_key, LikabilityKey, _Likability);
            _teamPos = GDEDataManager.GetInt(_key, teamPosKey, _teamPos);
            _likability = GDEDataManager.GetInt(_key, likabilityKey, _likability);
            _Fatigue = GDEDataManager.GetInt(_key, FatigueKey, _Fatigue);
            _TeamOrder = GDEDataManager.GetInt(_key, TeamOrderKey, _TeamOrder);
            _race = GDEDataManager.GetInt(_key, raceKey, _race);
            _skillLevel = GDEDataManager.GetInt(_key, skillLevelKey, _skillLevel);
            _teamIdBelongTo = GDEDataManager.GetString(_key, teamIdBelongToKey, _teamIdBelongTo);
            _skillOmegaId = GDEDataManager.GetString(_key, skillOmegaIdKey, _skillOmegaId);
            _skill0Id = GDEDataManager.GetString(_key, skill0IdKey, _skill0Id);
            _skill1Id = GDEDataManager.GetString(_key, skill1IdKey, _skill1Id);
            _id = GDEDataManager.GetString(_key, idKey, _id);

            _equipHelmet = GDEDataManager.GetCustom(_key, equipHelmetKey, _equipHelmet);
            _equipBreastplate = GDEDataManager.GetCustom(_key, equipBreastplateKey, _equipBreastplate);
            _equipGardebras = GDEDataManager.GetCustom(_key, equipGardebrasKey, _equipGardebras);
            _equipLegging = GDEDataManager.GetCustom(_key, equipLeggingKey, _equipLegging);
            _jewelry0 = GDEDataManager.GetCustom(_key, jewelry0Key, _jewelry0);
            _jewelry1 = GDEDataManager.GetCustom(_key, jewelry1Key, _jewelry1);
            _RoleAttritubeList = GDEDataManager.GetCustom(_key, RoleAttritubeListKey, _RoleAttritubeList);
            _equipWeapon = GDEDataManager.GetCustom(_key, equipWeaponKey, _equipWeapon);
            _ItemInfo = GDEDataManager.GetCustom(_key, ItemInfoKey, _ItemInfo);
            _AnimData = GDEDataManager.GetCustom(_key, AnimDataKey, _AnimData);

            skillsOwned = GDEDataManager.GetCustomList(_key, skillsOwnedKey, skillsOwned);
        }

        public GDEHeroData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEHeroData newClone = new GDEHeroData(newKey);

            newClone.locked = locked;
            newClone.lv = lv;
            newClone.status = status;
            newClone.hashCode = hashCode;
            newClone.battleForce = battleForce;
            newClone.hpPropAdd = hpPropAdd;
            newClone.exp = exp;
            newClone.mpPropAdd = mpPropAdd;
            newClone.tpPropAdd = tpPropAdd;
            newClone.starNumUpgradeTimes = starNumUpgradeTimes;
            newClone.index = index;
            newClone.wakeNum = wakeNum;
            newClone.nameBeforeId = nameBeforeId;
            newClone.Likability = Likability;
            newClone.teamPos = teamPos;
            newClone.likability = likability;
            newClone.Fatigue = Fatigue;
            newClone.TeamOrder = TeamOrder;
            newClone.race = race;
            newClone.skillLevel = skillLevel;
            newClone.teamIdBelongTo = teamIdBelongTo;
            newClone.skillOmegaId = skillOmegaId;
            newClone.skill0Id = skill0Id;
            newClone.skill1Id = skill1Id;
            newClone.id = id;

            newClone.equipHelmet = equipHelmet;
            newClone.equipBreastplate = equipBreastplate;
            newClone.equipGardebras = equipGardebras;
            newClone.equipLegging = equipLegging;
            newClone.jewelry0 = jewelry0;
            newClone.jewelry1 = jewelry1;
            newClone.RoleAttritubeList = RoleAttritubeList;
            newClone.equipWeapon = equipWeapon;
            newClone.ItemInfo = ItemInfo;
            newClone.AnimData = AnimData;

            newClone.skillsOwned = new List<GDEASkillData>(skillsOwned);
			newClone.Set_skillsOwned();

            return newClone;
		}

        public GDEHeroData DeepClone()
		{
			GDEHeroData newClone = ShallowClone();
            newClone.equipHelmet = equipHelmet.DeepClone();
            newClone.equipBreastplate = equipBreastplate.DeepClone();
            newClone.equipGardebras = equipGardebras.DeepClone();
            newClone.equipLegging = equipLegging.DeepClone();
            newClone.jewelry0 = jewelry0.DeepClone();
            newClone.jewelry1 = jewelry1.DeepClone();
            newClone.RoleAttritubeList = RoleAttritubeList.DeepClone();
            newClone.equipWeapon = equipWeapon.DeepClone();
            newClone.ItemInfo = ItemInfo.DeepClone();
            newClone.AnimData = AnimData.DeepClone();

            newClone.skillsOwned = new List<GDEASkillData>();
			if (skillsOwned != null)
			{
				foreach(var val in skillsOwned)
					newClone.skillsOwned.Add(val.DeepClone());
			}
			newClone.Set_skillsOwned();
            return newClone;
		}

        public void Reset_locked()
        {
            GDEDataManager.ResetToDefault(_key, lockedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(lockedKey, out _locked);
        }

        public void Reset_lv()
        {
            GDEDataManager.ResetToDefault(_key, lvKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(lvKey, out _lv);
        }

        public void Reset_status()
        {
            GDEDataManager.ResetToDefault(_key, statusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(statusKey, out _status);
        }

        public void Reset_hashCode()
        {
            GDEDataManager.ResetToDefault(_key, hashCodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(hashCodeKey, out _hashCode);
        }

        public void Reset_battleForce()
        {
            GDEDataManager.ResetToDefault(_key, battleForceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(battleForceKey, out _battleForce);
        }

        public void Reset_hpPropAdd()
        {
            GDEDataManager.ResetToDefault(_key, hpPropAddKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(hpPropAddKey, out _hpPropAdd);
        }

        public void Reset_exp()
        {
            GDEDataManager.ResetToDefault(_key, expKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(expKey, out _exp);
        }

        public void Reset_mpPropAdd()
        {
            GDEDataManager.ResetToDefault(_key, mpPropAddKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(mpPropAddKey, out _mpPropAdd);
        }

        public void Reset_tpPropAdd()
        {
            GDEDataManager.ResetToDefault(_key, tpPropAddKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(tpPropAddKey, out _tpPropAdd);
        }

        public void Reset_starNumUpgradeTimes()
        {
            GDEDataManager.ResetToDefault(_key, starNumUpgradeTimesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(starNumUpgradeTimesKey, out _starNumUpgradeTimes);
        }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_wakeNum()
        {
            GDEDataManager.ResetToDefault(_key, wakeNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(wakeNumKey, out _wakeNum);
        }

        public void Reset_nameBeforeId()
        {
            GDEDataManager.ResetToDefault(_key, nameBeforeIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(nameBeforeIdKey, out _nameBeforeId);
        }

        public void Reset_Likability()
        {
            GDEDataManager.ResetToDefault(_key, LikabilityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(LikabilityKey, out _Likability);
        }

        public void Reset_teamPos()
        {
            GDEDataManager.ResetToDefault(_key, teamPosKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(teamPosKey, out _teamPos);
        }

        public void Reset_likability()
        {
            GDEDataManager.ResetToDefault(_key, likabilityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(likabilityKey, out _likability);
        }

        public void Reset_Fatigue()
        {
            GDEDataManager.ResetToDefault(_key, FatigueKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(FatigueKey, out _Fatigue);
        }

        public void Reset_TeamOrder()
        {
            GDEDataManager.ResetToDefault(_key, TeamOrderKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(TeamOrderKey, out _TeamOrder);
        }

        public void Reset_race()
        {
            GDEDataManager.ResetToDefault(_key, raceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(raceKey, out _race);
        }

        public void Reset_skillLevel()
        {
            GDEDataManager.ResetToDefault(_key, skillLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(skillLevelKey, out _skillLevel);
        }

        public void Reset_teamIdBelongTo()
        {
            GDEDataManager.ResetToDefault(_key, teamIdBelongToKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(teamIdBelongToKey, out _teamIdBelongTo);
        }

        public void Reset_skillOmegaId()
        {
            GDEDataManager.ResetToDefault(_key, skillOmegaIdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(skillOmegaIdKey, out _skillOmegaId);
        }

        public void Reset_skill0Id()
        {
            GDEDataManager.ResetToDefault(_key, skill0IdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(skill0IdKey, out _skill0Id);
        }

        public void Reset_skill1Id()
        {
            GDEDataManager.ResetToDefault(_key, skill1IdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(skill1IdKey, out _skill1Id);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void Reset_equipHelmet()
		{
			GDEDataManager.ResetToDefault(_key, equipHelmetKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(equipHelmetKey, out customDataKey);
			_equipHelmet = new GDEEquipmentData(customDataKey);

			equipHelmet.ResetAll();
		}
        public void Reset_equipBreastplate()
		{
			GDEDataManager.ResetToDefault(_key, equipBreastplateKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(equipBreastplateKey, out customDataKey);
			_equipBreastplate = new GDEEquipmentData(customDataKey);

			equipBreastplate.ResetAll();
		}
        public void Reset_equipGardebras()
		{
			GDEDataManager.ResetToDefault(_key, equipGardebrasKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(equipGardebrasKey, out customDataKey);
			_equipGardebras = new GDEEquipmentData(customDataKey);

			equipGardebras.ResetAll();
		}
        public void Reset_equipLegging()
		{
			GDEDataManager.ResetToDefault(_key, equipLeggingKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(equipLeggingKey, out customDataKey);
			_equipLegging = new GDEEquipmentData(customDataKey);

			equipLegging.ResetAll();
		}
        public void Reset_jewelry0()
		{
			GDEDataManager.ResetToDefault(_key, jewelry0Key);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(jewelry0Key, out customDataKey);
			_jewelry0 = new GDEEquipmentData(customDataKey);

			jewelry0.ResetAll();
		}
        public void Reset_jewelry1()
		{
			GDEDataManager.ResetToDefault(_key, jewelry1Key);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(jewelry1Key, out customDataKey);
			_jewelry1 = new GDEEquipmentData(customDataKey);

			jewelry1.ResetAll();
		}
        public void Reset_RoleAttritubeList()
		{
			GDEDataManager.ResetToDefault(_key, RoleAttritubeListKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(RoleAttritubeListKey, out customDataKey);
			_RoleAttritubeList = new GDERoleAttritubeData(customDataKey);

			RoleAttritubeList.ResetAll();
		}
        public void Reset_equipWeapon()
		{
			GDEDataManager.ResetToDefault(_key, equipWeaponKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(equipWeaponKey, out customDataKey);
			_equipWeapon = new GDEEquipmentData(customDataKey);

			equipWeapon.ResetAll();
		}
        public void Reset_ItemInfo()
		{
			GDEDataManager.ResetToDefault(_key, ItemInfoKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(ItemInfoKey, out customDataKey);
			_ItemInfo = new GDEItemData(customDataKey);

			ItemInfo.ResetAll();
		}
        public void Reset_AnimData()
		{
			GDEDataManager.ResetToDefault(_key, AnimDataKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(AnimDataKey, out customDataKey);
			_AnimData = new GDEAnimData(customDataKey);

			AnimData.ResetAll();
		}

        public void Reset_skillsOwned()
		{
			GDEDataManager.ResetToDefault(_key, skillsOwnedKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(skillsOwnedKey, out skillsOwned);
			skillsOwned = GDEDataManager.GetCustomList(_key, skillsOwnedKey, skillsOwned);

			skillsOwned.ForEach(x => x.ResetAll());
		}

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, lvKey);
            GDEDataManager.ResetToDefault(_key, statusKey);
            GDEDataManager.ResetToDefault(_key, hashCodeKey);
            GDEDataManager.ResetToDefault(_key, battleForceKey);
            GDEDataManager.ResetToDefault(_key, expKey);
            GDEDataManager.ResetToDefault(_key, hpPropAddKey);
            GDEDataManager.ResetToDefault(_key, mpPropAddKey);
            GDEDataManager.ResetToDefault(_key, tpPropAddKey);
            GDEDataManager.ResetToDefault(_key, starNumUpgradeTimesKey);
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, wakeNumKey);
            GDEDataManager.ResetToDefault(_key, equipHelmetKey);
            GDEDataManager.ResetToDefault(_key, equipBreastplateKey);
            GDEDataManager.ResetToDefault(_key, equipGardebrasKey);
            GDEDataManager.ResetToDefault(_key, equipLeggingKey);
            GDEDataManager.ResetToDefault(_key, jewelry0Key);
            GDEDataManager.ResetToDefault(_key, jewelry1Key);
            GDEDataManager.ResetToDefault(_key, RoleAttritubeListKey);
            GDEDataManager.ResetToDefault(_key, nameBeforeIdKey);
            GDEDataManager.ResetToDefault(_key, equipWeaponKey);
            GDEDataManager.ResetToDefault(_key, LikabilityKey);
            GDEDataManager.ResetToDefault(_key, lockedKey);
            GDEDataManager.ResetToDefault(_key, teamIdBelongToKey);
            GDEDataManager.ResetToDefault(_key, skill0IdKey);
            GDEDataManager.ResetToDefault(_key, skill1IdKey);
            GDEDataManager.ResetToDefault(_key, skillsOwnedKey);
            GDEDataManager.ResetToDefault(_key, skillOmegaIdKey);
            GDEDataManager.ResetToDefault(_key, teamPosKey);
            GDEDataManager.ResetToDefault(_key, likabilityKey);
            GDEDataManager.ResetToDefault(_key, FatigueKey);
            GDEDataManager.ResetToDefault(_key, ItemInfoKey);
            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, TeamOrderKey);
            GDEDataManager.ResetToDefault(_key, AnimDataKey);
            GDEDataManager.ResetToDefault(_key, raceKey);
            GDEDataManager.ResetToDefault(_key, skillLevelKey);

            Reset_equipHelmet();
            Reset_equipBreastplate();
            Reset_equipGardebras();
            Reset_equipLegging();
            Reset_jewelry0();
            Reset_jewelry1();
            Reset_RoleAttritubeList();
            Reset_equipWeapon();
            Reset_ItemInfo();
            Reset_AnimData();
            Reset_skillsOwned();

            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
