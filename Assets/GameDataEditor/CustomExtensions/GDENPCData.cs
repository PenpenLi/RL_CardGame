// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDENPCData : IGDEData
    {
        static string workingInBulidingKey = "workingInBuliding";
		bool _workingInBuliding;
        public bool workingInBuliding
        {
            get { return _workingInBuliding; }
            set {
                if (_workingInBuliding != value)
                {
                    _workingInBuliding = value;
					GDEDataManager.SetBool(_key, workingInBulidingKey, _workingInBuliding);
                }
            }
        }

        static string ShowInBagKey = "ShowInBag";
		bool _ShowInBag;
        public bool ShowInBag
        {
            get { return _ShowInBag; }
            set {
                if (_ShowInBag != value)
                {
                    _ShowInBag = value;
					GDEDataManager.SetBool(_key, ShowInBagKey, _ShowInBag);
                }
            }
        }

        static string hashcodeKey = "hashcode";
		int _hashcode;
        public int hashcode
        {
            get { return _hashcode; }
            set {
                if (_hashcode != value)
                {
                    _hashcode = value;
					GDEDataManager.SetInt(_key, hashcodeKey, _hashcode);
                }
            }
        }

        static string expKey = "exp";
		int _exp;
        public int exp
        {
            get { return _exp; }
            set {
                if (_exp != value)
                {
                    _exp = value;
					GDEDataManager.SetInt(_key, expKey, _exp);
                }
            }
        }

        static string likabilityKey = "likability";
		int _likability;
        public int likability
        {
            get { return _likability; }
            set {
                if (_likability != value)
                {
                    _likability = value;
					GDEDataManager.SetInt(_key, likabilityKey, _likability);
                }
            }
        }

        static string workPower0Key = "workPower0";
		int _workPower0;
        public int workPower0
        {
            get { return _workPower0; }
            set {
                if (_workPower0 != value)
                {
                    _workPower0 = value;
					GDEDataManager.SetInt(_key, workPower0Key, _workPower0);
                }
            }
        }

        static string workPower1Key = "workPower1";
		int _workPower1;
        public int workPower1
        {
            get { return _workPower1; }
            set {
                if (_workPower1 != value)
                {
                    _workPower1 = value;
					GDEDataManager.SetInt(_key, workPower1Key, _workPower1);
                }
            }
        }

        static string workPower2Key = "workPower2";
		int _workPower2;
        public int workPower2
        {
            get { return _workPower2; }
            set {
                if (_workPower2 != value)
                {
                    _workPower2 = value;
					GDEDataManager.SetInt(_key, workPower2Key, _workPower2);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        public GDENPCData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "NPC");
			
            dict.Merge(true, workingInBuliding.ToGDEDict(workingInBulidingKey));
            dict.Merge(true, ShowInBag.ToGDEDict(ShowInBagKey));
            dict.Merge(true, hashcode.ToGDEDict(hashcodeKey));
            dict.Merge(true, exp.ToGDEDict(expKey));
            dict.Merge(true, likability.ToGDEDict(likabilityKey));
            dict.Merge(true, workPower0.ToGDEDict(workPower0Key));
            dict.Merge(true, workPower1.ToGDEDict(workPower1Key));
            dict.Merge(true, workPower2.ToGDEDict(workPower2Key));
            dict.Merge(true, id.ToGDEDict(idKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(workingInBulidingKey, out _workingInBuliding);
                dict.TryGetBool(ShowInBagKey, out _ShowInBag);
                dict.TryGetInt(hashcodeKey, out _hashcode);
                dict.TryGetInt(expKey, out _exp);
                dict.TryGetInt(likabilityKey, out _likability);
                dict.TryGetInt(workPower0Key, out _workPower0);
                dict.TryGetInt(workPower1Key, out _workPower1);
                dict.TryGetInt(workPower2Key, out _workPower2);
                dict.TryGetString(idKey, out _id);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _workingInBuliding = GDEDataManager.GetBool(_key, workingInBulidingKey, _workingInBuliding);
            _ShowInBag = GDEDataManager.GetBool(_key, ShowInBagKey, _ShowInBag);
            _hashcode = GDEDataManager.GetInt(_key, hashcodeKey, _hashcode);
            _exp = GDEDataManager.GetInt(_key, expKey, _exp);
            _likability = GDEDataManager.GetInt(_key, likabilityKey, _likability);
            _workPower0 = GDEDataManager.GetInt(_key, workPower0Key, _workPower0);
            _workPower1 = GDEDataManager.GetInt(_key, workPower1Key, _workPower1);
            _workPower2 = GDEDataManager.GetInt(_key, workPower2Key, _workPower2);
            _id = GDEDataManager.GetString(_key, idKey, _id);
        }

        public GDENPCData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDENPCData newClone = new GDENPCData(newKey);

            newClone.workingInBuliding = workingInBuliding;
            newClone.ShowInBag = ShowInBag;
            newClone.hashcode = hashcode;
            newClone.exp = exp;
            newClone.likability = likability;
            newClone.workPower0 = workPower0;
            newClone.workPower1 = workPower1;
            newClone.workPower2 = workPower2;
            newClone.id = id;

            return newClone;
		}

        public GDENPCData DeepClone()
		{
			GDENPCData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_workingInBuliding()
        {
            GDEDataManager.ResetToDefault(_key, workingInBulidingKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(workingInBulidingKey, out _workingInBuliding);
        }

        public void Reset_ShowInBag()
        {
            GDEDataManager.ResetToDefault(_key, ShowInBagKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(ShowInBagKey, out _ShowInBag);
        }

        public void Reset_hashcode()
        {
            GDEDataManager.ResetToDefault(_key, hashcodeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(hashcodeKey, out _hashcode);
        }

        public void Reset_exp()
        {
            GDEDataManager.ResetToDefault(_key, expKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(expKey, out _exp);
        }

        public void Reset_likability()
        {
            GDEDataManager.ResetToDefault(_key, likabilityKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(likabilityKey, out _likability);
        }

        public void Reset_workPower0()
        {
            GDEDataManager.ResetToDefault(_key, workPower0Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(workPower0Key, out _workPower0);
        }

        public void Reset_workPower1()
        {
            GDEDataManager.ResetToDefault(_key, workPower1Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(workPower1Key, out _workPower1);
        }

        public void Reset_workPower2()
        {
            GDEDataManager.ResetToDefault(_key, workPower2Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(workPower2Key, out _workPower2);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, hashcodeKey);
            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, workingInBulidingKey);
            GDEDataManager.ResetToDefault(_key, expKey);
            GDEDataManager.ResetToDefault(_key, likabilityKey);
            GDEDataManager.ResetToDefault(_key, ShowInBagKey);
            GDEDataManager.ResetToDefault(_key, workPower0Key);
            GDEDataManager.ResetToDefault(_key, workPower1Key);
            GDEDataManager.ResetToDefault(_key, workPower2Key);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
