// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEAMaterialData : IGDEData
    {
        static string idKey = "id";
		int _id;
        public int id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetInt(_key, idKey, _id);
                }
            }
        }

        static string numKey = "num";
		int _num;
        public int num
        {
            get { return _num; }
            set {
                if (_num != value)
                {
                    _num = value;
					GDEDataManager.SetInt(_key, numKey, _num);
                }
            }
        }

        public GDEAMaterialData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "AMaterial");
			
            dict.Merge(true, id.ToGDEDict(idKey));
            dict.Merge(true, num.ToGDEDict(numKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(idKey, out _id);
                dict.TryGetInt(numKey, out _num);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _id = GDEDataManager.GetInt(_key, idKey, _id);
            _num = GDEDataManager.GetInt(_key, numKey, _num);
        }

        public GDEAMaterialData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEAMaterialData newClone = new GDEAMaterialData(newKey);

            newClone.id = id;
            newClone.num = num;

            return newClone;
		}

        public GDEAMaterialData DeepClone()
		{
			GDEAMaterialData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(idKey, out _id);
        }

        public void Reset_num()
        {
            GDEDataManager.ResetToDefault(_key, numKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(numKey, out _num);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, numKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
