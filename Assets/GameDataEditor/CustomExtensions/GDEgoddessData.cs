// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEgoddessData : IGDEData
    {
        static string starKey = "star";
		int _star;
        public int star
        {
            get { return _star; }
            set {
                if (_star != value)
                {
                    _star = value;
					GDEDataManager.SetInt(_key, starKey, _star);
                }
            }
        }

        static string volumeKey = "volume";
		int _volume;
        public int volume
        {
            get { return _volume; }
            set {
                if (_volume != value)
                {
                    _volume = value;
					GDEDataManager.SetInt(_key, volumeKey, _volume);
                }
            }
        }

        static string expKey = "exp";
		int _exp;
        public int exp
        {
            get { return _exp; }
            set {
                if (_exp != value)
                {
                    _exp = value;
					GDEDataManager.SetInt(_key, expKey, _exp);
                }
            }
        }

        static string idKey = "id";
		string _id;
        public string id
        {
            get { return _id; }
            set {
                if (_id != value)
                {
                    _id = value;
					GDEDataManager.SetString(_key, idKey, _id);
                }
            }
        }

        static string UseTeamIdKey = "UseTeamId";
		public List<int>      UseTeamId;
		public void Set_UseTeamId()
        {
	        GDEDataManager.SetIntList(_key, UseTeamIdKey, UseTeamId);
		}
		
        static string StonesEquippedKey = "StonesEquipped";
		public List<int>      StonesEquipped;
		public void Set_StonesEquipped()
        {
	        GDEDataManager.SetIntList(_key, StonesEquippedKey, StonesEquipped);
		}
		

        public GDEgoddessData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "goddess");
			
            dict.Merge(true, star.ToGDEDict(starKey));
            dict.Merge(true, volume.ToGDEDict(volumeKey));
            dict.Merge(true, exp.ToGDEDict(expKey));
            dict.Merge(true, id.ToGDEDict(idKey));

            dict.Merge(true, UseTeamId.ToGDEDict(UseTeamIdKey));
            dict.Merge(true, StonesEquipped.ToGDEDict(StonesEquippedKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(starKey, out _star);
                dict.TryGetInt(volumeKey, out _volume);
                dict.TryGetInt(expKey, out _exp);
                dict.TryGetString(idKey, out _id);

                dict.TryGetIntList(UseTeamIdKey, out UseTeamId);
                dict.TryGetIntList(StonesEquippedKey, out StonesEquipped);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _star = GDEDataManager.GetInt(_key, starKey, _star);
            _volume = GDEDataManager.GetInt(_key, volumeKey, _volume);
            _exp = GDEDataManager.GetInt(_key, expKey, _exp);
            _id = GDEDataManager.GetString(_key, idKey, _id);

            UseTeamId = GDEDataManager.GetIntList(_key, UseTeamIdKey, UseTeamId);
            StonesEquipped = GDEDataManager.GetIntList(_key, StonesEquippedKey, StonesEquipped);
        }

        public GDEgoddessData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEgoddessData newClone = new GDEgoddessData(newKey);

            newClone.star = star;
            newClone.volume = volume;
            newClone.exp = exp;
            newClone.id = id;

            newClone.UseTeamId = new List<int>(UseTeamId);
			newClone.Set_UseTeamId();
            newClone.StonesEquipped = new List<int>(StonesEquipped);
			newClone.Set_StonesEquipped();

            return newClone;
		}

        public GDEgoddessData DeepClone()
		{
			GDEgoddessData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_star()
        {
            GDEDataManager.ResetToDefault(_key, starKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(starKey, out _star);
        }

        public void Reset_volume()
        {
            GDEDataManager.ResetToDefault(_key, volumeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(volumeKey, out _volume);
        }

        public void Reset_exp()
        {
            GDEDataManager.ResetToDefault(_key, expKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(expKey, out _exp);
        }

        public void Reset_id()
        {
            GDEDataManager.ResetToDefault(_key, idKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(idKey, out _id);
        }

        public void Reset_UseTeamId()
        {
	        GDEDataManager.ResetToDefault(_key, UseTeamIdKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(UseTeamIdKey, out UseTeamId);
        }
		
        public void Reset_StonesEquipped()
        {
	        GDEDataManager.ResetToDefault(_key, StonesEquippedKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(StonesEquippedKey, out StonesEquipped);
        }
		

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, idKey);
            GDEDataManager.ResetToDefault(_key, starKey);
            GDEDataManager.ResetToDefault(_key, UseTeamIdKey);
            GDEDataManager.ResetToDefault(_key, volumeKey);
            GDEDataManager.ResetToDefault(_key, expKey);
            GDEDataManager.ResetToDefault(_key, StonesEquippedKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
