// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      E:\RL_CardGame_Build\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEAnimData : IGDEData
    {
        static string isRareKey = "isRare";
		bool _isRare;
        public bool isRare
        {
            get { return _isRare; }
            set {
                if (_isRare != value)
                {
                    _isRare = value;
					GDEDataManager.SetBool(_key, isRareKey, _isRare);
                }
            }
        }

        static string skeletonIndexKey = "skeletonIndex";
		int _skeletonIndex;
        public int skeletonIndex
        {
            get { return _skeletonIndex; }
            set {
                if (_skeletonIndex != value)
                {
                    _skeletonIndex = value;
					GDEDataManager.SetInt(_key, skeletonIndexKey, _skeletonIndex);
                }
            }
        }

        static string bodyKey = "body";
		string _body;
        public string body
        {
            get { return _body; }
            set {
                if (_body != value)
                {
                    _body = value;
					GDEDataManager.SetString(_key, bodyKey, _body);
                }
            }
        }

        static string eyesKey = "eyes";
		string _eyes;
        public string eyes
        {
            get { return _eyes; }
            set {
                if (_eyes != value)
                {
                    _eyes = value;
					GDEDataManager.SetString(_key, eyesKey, _eyes);
                }
            }
        }

        static string faceotherKey = "faceother";
		string _faceother;
        public string faceother
        {
            get { return _faceother; }
            set {
                if (_faceother != value)
                {
                    _faceother = value;
					GDEDataManager.SetString(_key, faceotherKey, _faceother);
                }
            }
        }

        static string hairKey = "hair";
		string _hair;
        public string hair
        {
            get { return _hair; }
            set {
                if (_hair != value)
                {
                    _hair = value;
					GDEDataManager.SetString(_key, hairKey, _hair);
                }
            }
        }

        static string handRKey = "handR";
		string _handR;
        public string handR
        {
            get { return _handR; }
            set {
                if (_handR != value)
                {
                    _handR = value;
					GDEDataManager.SetString(_key, handRKey, _handR);
                }
            }
        }

        static string headKey = "head";
		string _head;
        public string head
        {
            get { return _head; }
            set {
                if (_head != value)
                {
                    _head = value;
					GDEDataManager.SetString(_key, headKey, _head);
                }
            }
        }

        static string hipsKey = "hips";
		string _hips;
        public string hips
        {
            get { return _hips; }
            set {
                if (_hips != value)
                {
                    _hips = value;
					GDEDataManager.SetString(_key, hipsKey, _hips);
                }
            }
        }

        static string L_hand_aKey = "L_hand_a";
		string _L_hand_a;
        public string L_hand_a
        {
            get { return _L_hand_a; }
            set {
                if (_L_hand_a != value)
                {
                    _L_hand_a = value;
					GDEDataManager.SetString(_key, L_hand_aKey, _L_hand_a);
                }
            }
        }

        static string L_hand_bKey = "L_hand_b";
		string _L_hand_b;
        public string L_hand_b
        {
            get { return _L_hand_b; }
            set {
                if (_L_hand_b != value)
                {
                    _L_hand_b = value;
					GDEDataManager.SetString(_key, L_hand_bKey, _L_hand_b);
                }
            }
        }

        static string L_hand_cKey = "L_hand_c";
		string _L_hand_c;
        public string L_hand_c
        {
            get { return _L_hand_c; }
            set {
                if (_L_hand_c != value)
                {
                    _L_hand_c = value;
					GDEDataManager.SetString(_key, L_hand_cKey, _L_hand_c);
                }
            }
        }

        static string L_jiaoKey = "L_jiao";
		string _L_jiao;
        public string L_jiao
        {
            get { return _L_jiao; }
            set {
                if (_L_jiao != value)
                {
                    _L_jiao = value;
					GDEDataManager.SetString(_key, L_jiaoKey, _L_jiao);
                }
            }
        }

        static string L_leg_aKey = "L_leg_a";
		string _L_leg_a;
        public string L_leg_a
        {
            get { return _L_leg_a; }
            set {
                if (_L_leg_a != value)
                {
                    _L_leg_a = value;
					GDEDataManager.SetString(_key, L_leg_aKey, _L_leg_a);
                }
            }
        }

        static string L_leg_bKey = "L_leg_b";
		string _L_leg_b;
        public string L_leg_b
        {
            get { return _L_leg_b; }
            set {
                if (_L_leg_b != value)
                {
                    _L_leg_b = value;
					GDEDataManager.SetString(_key, L_leg_bKey, _L_leg_b);
                }
            }
        }

        static string liuhaiKey = "liuhai";
		string _liuhai;
        public string liuhai
        {
            get { return _liuhai; }
            set {
                if (_liuhai != value)
                {
                    _liuhai = value;
					GDEDataManager.SetString(_key, liuhaiKey, _liuhai);
                }
            }
        }

        static string R_leg_aKey = "R_leg_a";
		string _R_leg_a;
        public string R_leg_a
        {
            get { return _R_leg_a; }
            set {
                if (_R_leg_a != value)
                {
                    _R_leg_a = value;
					GDEDataManager.SetString(_key, R_leg_aKey, _R_leg_a);
                }
            }
        }

        static string R_leg_bKey = "R_leg_b";
		string _R_leg_b;
        public string R_leg_b
        {
            get { return _R_leg_b; }
            set {
                if (_R_leg_b != value)
                {
                    _R_leg_b = value;
					GDEDataManager.SetString(_key, R_leg_bKey, _R_leg_b);
                }
            }
        }

        public GDEAnimData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Anim");
			
            dict.Merge(true, isRare.ToGDEDict(isRareKey));
            dict.Merge(true, skeletonIndex.ToGDEDict(skeletonIndexKey));
            dict.Merge(true, body.ToGDEDict(bodyKey));
            dict.Merge(true, eyes.ToGDEDict(eyesKey));
            dict.Merge(true, faceother.ToGDEDict(faceotherKey));
            dict.Merge(true, hair.ToGDEDict(hairKey));
            dict.Merge(true, handR.ToGDEDict(handRKey));
            dict.Merge(true, head.ToGDEDict(headKey));
            dict.Merge(true, hips.ToGDEDict(hipsKey));
            dict.Merge(true, L_hand_a.ToGDEDict(L_hand_aKey));
            dict.Merge(true, L_hand_b.ToGDEDict(L_hand_bKey));
            dict.Merge(true, L_hand_c.ToGDEDict(L_hand_cKey));
            dict.Merge(true, L_jiao.ToGDEDict(L_jiaoKey));
            dict.Merge(true, L_leg_a.ToGDEDict(L_leg_aKey));
            dict.Merge(true, L_leg_b.ToGDEDict(L_leg_bKey));
            dict.Merge(true, liuhai.ToGDEDict(liuhaiKey));
            dict.Merge(true, R_leg_a.ToGDEDict(R_leg_aKey));
            dict.Merge(true, R_leg_b.ToGDEDict(R_leg_bKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isRareKey, out _isRare);
                dict.TryGetInt(skeletonIndexKey, out _skeletonIndex);
                dict.TryGetString(bodyKey, out _body);
                dict.TryGetString(eyesKey, out _eyes);
                dict.TryGetString(faceotherKey, out _faceother);
                dict.TryGetString(hairKey, out _hair);
                dict.TryGetString(handRKey, out _handR);
                dict.TryGetString(headKey, out _head);
                dict.TryGetString(hipsKey, out _hips);
                dict.TryGetString(L_hand_aKey, out _L_hand_a);
                dict.TryGetString(L_hand_bKey, out _L_hand_b);
                dict.TryGetString(L_hand_cKey, out _L_hand_c);
                dict.TryGetString(L_jiaoKey, out _L_jiao);
                dict.TryGetString(L_leg_aKey, out _L_leg_a);
                dict.TryGetString(L_leg_bKey, out _L_leg_b);
                dict.TryGetString(liuhaiKey, out _liuhai);
                dict.TryGetString(R_leg_aKey, out _R_leg_a);
                dict.TryGetString(R_leg_bKey, out _R_leg_b);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isRare = GDEDataManager.GetBool(_key, isRareKey, _isRare);
            _skeletonIndex = GDEDataManager.GetInt(_key, skeletonIndexKey, _skeletonIndex);
            _body = GDEDataManager.GetString(_key, bodyKey, _body);
            _eyes = GDEDataManager.GetString(_key, eyesKey, _eyes);
            _faceother = GDEDataManager.GetString(_key, faceotherKey, _faceother);
            _hair = GDEDataManager.GetString(_key, hairKey, _hair);
            _handR = GDEDataManager.GetString(_key, handRKey, _handR);
            _head = GDEDataManager.GetString(_key, headKey, _head);
            _hips = GDEDataManager.GetString(_key, hipsKey, _hips);
            _L_hand_a = GDEDataManager.GetString(_key, L_hand_aKey, _L_hand_a);
            _L_hand_b = GDEDataManager.GetString(_key, L_hand_bKey, _L_hand_b);
            _L_hand_c = GDEDataManager.GetString(_key, L_hand_cKey, _L_hand_c);
            _L_jiao = GDEDataManager.GetString(_key, L_jiaoKey, _L_jiao);
            _L_leg_a = GDEDataManager.GetString(_key, L_leg_aKey, _L_leg_a);
            _L_leg_b = GDEDataManager.GetString(_key, L_leg_bKey, _L_leg_b);
            _liuhai = GDEDataManager.GetString(_key, liuhaiKey, _liuhai);
            _R_leg_a = GDEDataManager.GetString(_key, R_leg_aKey, _R_leg_a);
            _R_leg_b = GDEDataManager.GetString(_key, R_leg_bKey, _R_leg_b);
        }

        public GDEAnimData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEAnimData newClone = new GDEAnimData(newKey);

            newClone.isRare = isRare;
            newClone.skeletonIndex = skeletonIndex;
            newClone.body = body;
            newClone.eyes = eyes;
            newClone.faceother = faceother;
            newClone.hair = hair;
            newClone.handR = handR;
            newClone.head = head;
            newClone.hips = hips;
            newClone.L_hand_a = L_hand_a;
            newClone.L_hand_b = L_hand_b;
            newClone.L_hand_c = L_hand_c;
            newClone.L_jiao = L_jiao;
            newClone.L_leg_a = L_leg_a;
            newClone.L_leg_b = L_leg_b;
            newClone.liuhai = liuhai;
            newClone.R_leg_a = R_leg_a;
            newClone.R_leg_b = R_leg_b;

            return newClone;
		}

        public GDEAnimData DeepClone()
		{
			GDEAnimData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_isRare()
        {
            GDEDataManager.ResetToDefault(_key, isRareKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isRareKey, out _isRare);
        }

        public void Reset_skeletonIndex()
        {
            GDEDataManager.ResetToDefault(_key, skeletonIndexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(skeletonIndexKey, out _skeletonIndex);
        }

        public void Reset_body()
        {
            GDEDataManager.ResetToDefault(_key, bodyKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(bodyKey, out _body);
        }

        public void Reset_eyes()
        {
            GDEDataManager.ResetToDefault(_key, eyesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(eyesKey, out _eyes);
        }

        public void Reset_faceother()
        {
            GDEDataManager.ResetToDefault(_key, faceotherKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(faceotherKey, out _faceother);
        }

        public void Reset_hair()
        {
            GDEDataManager.ResetToDefault(_key, hairKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(hairKey, out _hair);
        }

        public void Reset_handR()
        {
            GDEDataManager.ResetToDefault(_key, handRKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(handRKey, out _handR);
        }

        public void Reset_head()
        {
            GDEDataManager.ResetToDefault(_key, headKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(headKey, out _head);
        }

        public void Reset_hips()
        {
            GDEDataManager.ResetToDefault(_key, hipsKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(hipsKey, out _hips);
        }

        public void Reset_L_hand_a()
        {
            GDEDataManager.ResetToDefault(_key, L_hand_aKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_hand_aKey, out _L_hand_a);
        }

        public void Reset_L_hand_b()
        {
            GDEDataManager.ResetToDefault(_key, L_hand_bKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_hand_bKey, out _L_hand_b);
        }

        public void Reset_L_hand_c()
        {
            GDEDataManager.ResetToDefault(_key, L_hand_cKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_hand_cKey, out _L_hand_c);
        }

        public void Reset_L_jiao()
        {
            GDEDataManager.ResetToDefault(_key, L_jiaoKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_jiaoKey, out _L_jiao);
        }

        public void Reset_L_leg_a()
        {
            GDEDataManager.ResetToDefault(_key, L_leg_aKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_leg_aKey, out _L_leg_a);
        }

        public void Reset_L_leg_b()
        {
            GDEDataManager.ResetToDefault(_key, L_leg_bKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(L_leg_bKey, out _L_leg_b);
        }

        public void Reset_liuhai()
        {
            GDEDataManager.ResetToDefault(_key, liuhaiKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(liuhaiKey, out _liuhai);
        }

        public void Reset_R_leg_a()
        {
            GDEDataManager.ResetToDefault(_key, R_leg_aKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(R_leg_aKey, out _R_leg_a);
        }

        public void Reset_R_leg_b()
        {
            GDEDataManager.ResetToDefault(_key, R_leg_bKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(R_leg_bKey, out _R_leg_b);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, isRareKey);
            GDEDataManager.ResetToDefault(_key, bodyKey);
            GDEDataManager.ResetToDefault(_key, eyesKey);
            GDEDataManager.ResetToDefault(_key, faceotherKey);
            GDEDataManager.ResetToDefault(_key, hairKey);
            GDEDataManager.ResetToDefault(_key, handRKey);
            GDEDataManager.ResetToDefault(_key, headKey);
            GDEDataManager.ResetToDefault(_key, hipsKey);
            GDEDataManager.ResetToDefault(_key, L_hand_aKey);
            GDEDataManager.ResetToDefault(_key, L_hand_bKey);
            GDEDataManager.ResetToDefault(_key, L_hand_cKey);
            GDEDataManager.ResetToDefault(_key, L_jiaoKey);
            GDEDataManager.ResetToDefault(_key, L_leg_aKey);
            GDEDataManager.ResetToDefault(_key, L_leg_bKey);
            GDEDataManager.ResetToDefault(_key, liuhaiKey);
            GDEDataManager.ResetToDefault(_key, R_leg_aKey);
            GDEDataManager.ResetToDefault(_key, R_leg_bKey);
            GDEDataManager.ResetToDefault(_key, skeletonIndexKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
